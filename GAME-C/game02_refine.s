;
; File generated by cc65 v 2.19 - Git 03d824e
;
	.fopt		compiler,"cc65 v 2.19 - Git 03d824e"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
;	.forceimport	initmainargs
	.import		_c_kbhit
	.import		_c_getch
	.import		_c_putch
	.import		_srand
	.import		_rand
	.import		_warm_boot
	.import		_mach_fin
	.export		_newline
	.export		_main

;.segment	"DATA"
.segment	"RODATA"

_open_msg:
	.addr	S0001
_rdy_msg:
	.addr	S0002
_t_lock:
	.addr	S0003
_bk_msg:
	.addr	S0004

.segment	"RODATA"

S0001:
	.byte	$47,$41,$4D,$45,$2D,$43,$20,$4D,$45,$5A,$57,$36,$35,$43,$5F,$52
	.byte	$41,$4D,$20,$45,$64,$69,$74,$69,$6F,$6E,$0D,$0A,$00
S0002:
	.byte	$2A,$52,$45,$41,$44,$59,$0D,$0A,$00
S0004:
	.byte	$0D,$0A,$53,$74,$6F,$70,$21,$00
S000D:
	.byte	$0D,$0A,$45,$72,$72,$00
S000F	:=	S000D+0
S000E:
	.byte	$20,$69,$6E,$20,$00
S000C:
	.byte	$20,$29,$3F,$00
S000B:
	.byte	$20,$22,$3F,$00
S000A	:=	S000C+0
S0009:
	.byte	$20,$3F,$00
S0010	:=	S0001+26
S0006:
	.byte	$33,$00
S0007:
	.byte	$34,$00
S0008:
	.byte	$35,$00
S0005:
	.byte	$32,$00
S0003:
	.byte	$31,$00

.segment	"BSS"

_text_buf:
	.res	30720,$00
_lin:
	.res	160,$00
_lky_buf:
	.res	160,$00
_pc:
	.res	2,$00
_sp:
	.res	2,$00
_stack:
	.res	200,$00
_lno:
	.res	2,$00
_var:
	.res	256,$00
_mm:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ newline (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_newline: near

.segment	"CODE"

	lda     #<(S0010)
	ldx     #>(S0010)
	jsr     pushax
	jsr     ldax0sp
	jsr     _c_puts
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ c_puts (const unsigned char *s)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_c_puts: near

.segment	"CODE"

	jsr     pushax
	bra     L0004
L0002:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1)
	sta     regsave
	stz     regsave+1
	lda     #$01
	jsr     addeq0sp
	lda     regsave
	ldx     regsave+1
	jsr     _c_putch
L0004:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	bne     L0002
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ newText1 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_newText1: near

.segment	"CODE"

	lda     _var+122
	ldx     _var+122+1
	sta     _var+76
	stx     _var+76+1
	sta     ptr1
	stx     ptr1+1
	lda     #$FF
	sta     (ptr1)
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ c_gets (unsigned char *lbuf)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_c_gets: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp3
	ldx     #$00
	txa
	jsr     stax0sp
	bra     L000E
L0019:	lda     (sp),y
	cmp     #$09
	bne     L001B
	lda     #$20
	sta     (sp),y
L001B:	lda     (sp),y
	cmp     #$08
	beq     L001C
	cmp     #$7F
	bne     L0023
L001C:	lda     (sp)
	dey
	ora     (sp),y
	beq     L0006
	ldx     #$00
	tya
	jsr     subeq0sp
	ldx     #$00
	lda     #$08
	jsr     _c_putch
	ldx     #$00
	lda     #$20
	jsr     _c_putch
	ldx     #$00
	lda     #$08
	bra     L0018
L0006:	iny
L0023:	lda     (sp),y
	jsr     _c_isprint
	tax
	beq     L000E
	ldy     #$01
	lda     (sp),y
	cmp     #$00
	bne     L0010
	lda     (sp)
	cmp     #$9F
L0010:	bcs     L000E
	jsr     ldax0sp
	clc
	ldy     #$03
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	sta     (ptr1)
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	ldy     #$02
	ldx     #$00
	lda     (sp),y
L0018:	jsr     _c_putch
L000E:	jsr     _c_getch
	ldy     #$02
	sta     (sp),y
	cmp     #$0D
	bne     L0019
	jsr     _newline
	jsr     ldax0sp
	clc
	ldy     #$03
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	lda     (sp)
	ldy     #$01
	ora     (sp),y
	beq     L0022
L0015:	ldx     #$00
	lda     #$01
	jsr     subeq0sp
	jsr     ldax0sp
	clc
	ldy     #$03
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	jsr     _c_isspace
	tax
	bne     L0015
	ina
	jsr     addeq0sp
	jsr     ldax0sp
	clc
	ldy     #$03
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
L0022:	jsr     ldax0sp
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ skipBlank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_skipBlank: near

.segment	"CODE"

L0005:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	cmp     #$20
	bne     L0003
	inc     _pc
	bne     L0005
	inc     _pc+1
	bra     L0005
L0003:	rts

.endproc

; ---------------------------------------------------------------
; int __near__ getNum (f) int *f;
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getNum: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp1
	jsr     push0
	ldy     #$04
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$01
	sta     (ptr1),y
	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	iny
	sta     (sp),y
	bra     L000B
L0002:	jsr     ldax0sp
	jsr     mulax10
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	ldy     #$02
	lda     (sp),y
	ldy     #$30
	jsr     decaxy
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     stax0sp
	inc     _pc
	bne     L0008
	inc     _pc+1
L0008:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	ldy     #$02
	sta     (sp),y
	ldy     #$04
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$01
	sta     (ptr1)
	tay
	dea
	sta     (ptr1),y
L000B:	lda     #$30
	ldy     #$02
	cmp     (sp),y
	beq     L000D
	bcs     L0009
L000D:	lda     (sp),y
	cmp     #$3A
	bcc     L0002
L0009:	jsr     ldax0sp
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ exqt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_exqt: near

.segment	"CODE"

L0005:	jsr     _skipBlank
	jsr     _do_cmd
	bra     L0005

.endproc

; ---------------------------------------------------------------
; int __near__ edit (n) int n;
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_edit: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp4
	ldy     #$04
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L000A
	lda     _var+122
	ldx     _var+122+1
	jsr     _dispList
	ldx     #$00
	txa
	jsr     _w_boot
L000A:	ldy     #$07
	jsr     pushwysp
	lda     #$02
	jsr     leaa0sp
	jsr     _searchLine
	ldy     #$02
	jsr     staxysp
	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	cmp     #$2F
	bne     L0004
	ldy     #$03
	jsr     ldaxysp
	jsr     _dispList
	ldx     #$00
	txa
	jsr     _w_boot
	bra     L0005
L0004:	lda     _var+76+1
	sta     ptr1+1
	lda     _var+76
	sta     ptr1
	lda     (ptr1)
	cmp     #$FF
	beq     L0006
	lda     _t_lock
	ldx     _t_lock+1
	jsr     _er_boot
L0006:	ldy     #$01
	lda     (sp),y
	ora     (sp)
	beq     L0007
	ldy     #$03
	jsr     ldaxysp
	jsr     _deleteLine
L0007:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	bne     L0008
	tax
	jmp     incsp6
L0008:	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	lda     _pc
	ldx     _pc+1
	jsr     _addLine
L0005:	ldx     #$00
	txa
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ dispList (p) unsigned char *p;
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_dispList: near

.segment	"CODE"

	jsr     pushax
L0002:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	and     #$80
	bne     L0003
	jsr     _breakCheck
	jsr     ldax0sp
	jsr     _dispLine
	jsr     stax0sp
	bra     L0002
L0003:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ w_boot (unsigned char *msg)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_w_boot: near

.segment	"CODE"

	jsr     pushax
	jsr     _newline
	ldy     #$01
	lda     (sp),y
	ora     (sp)
	beq     L0002
	jsr     ldax0sp
	jsr     _c_puts
L0002:	jsr     _warm_boot
	ldx     #$00
	txa
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ er_boot (unsigned char *msg)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_er_boot: near

.segment	"CODE"

	jsr     pushax
	lda     #<(S000F)
	ldx     #>(S000F)
	jsr     _c_puts
	ldy     #$01
	lda     (sp),y
	ora     (sp)
	beq     L0002
	jsr     ldax0sp
	jsr     _c_puts
L0002:	jsr     _warm_boot
	ldx     #$00
	txa
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ deleteLine (p) unsigned char *p;
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_deleteLine: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp2
	ldy     #$03
	jsr     ldaxysp
	jsr     incax2
	jsr     _strlen
	jsr     incax2
	ina
	bne     L0002
	inx
L0002:	jsr     stax0sp
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	lda     _var+76
	sec
	ldy     #$06
	sbc     (sp),y
	pha
	lda     _var+76+1
	iny
	sbc     (sp),y
	tax
	pla
	sec
	ldy     #$04
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	ina
	bne     L0003
	inx
L0003:	jsr     _memmove
	jsr     ldax0sp
	eor     #$FF
	sec
	adc     _var+76
	sta     _var+76
	txa
	eor     #$FF
	adc     _var+76+1
	sta     _var+76+1
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ addLine (n, p, new) int n; unsigned char *p; unsigned char *new;
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_addLine: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp2
	ldy     #$03
	jsr     ldaxysp
	jsr     _strlen
	jsr     incax2
	ina
	bne     L0002
	inx
L0002:	jsr     stax0sp
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	lda     _var+76
	sec
	ldy     #$08
	sbc     (sp),y
	pha
	lda     _var+76+1
	iny
	sbc     (sp),y
	tax
	pla
	ina
	bne     L0003
	inx
L0003:	jsr     _memmove
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$07
	lda     (sp),y
	sta     (ptr1)
	ldy     #$05
	jsr     ldaxysp
	ina
	bne     L0005
	inx
L0005:	sta     ptr1
	stx     ptr1+1
	ldy     #$06
	lda     (sp),y
	sta     (ptr1)
	dey
	jsr     ldaxysp
	jsr     incax2
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     _strcpy
	jsr     ldax0sp
	clc
	adc     _var+76
	sta     _var+76
	txa
	adc     _var+76+1
	sta     _var+76+1
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; int __near__ strlen (const unsigned char *s)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_strlen: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	bra     L0004
L0002:	ldx     #$00
	lda     #$01
	jsr     addeq0sp
L0004:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	php
	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	plp
	bne     L0002
	jsr     ldax0sp
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ breakCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_breakCheck: near

.segment	"CODE"

;	jsr     decsp2
	jsr     _c_kbhit
	tax
	beq     L0005
	jsr     _c_getch
;	jsr     stax0sp
;	cpx     #$00
;	bne     L0003
	cmp     #$03
	bne     L0003
	lda     _bk_msg
	ldx     _bk_msg+1
	jsr     _w_boot
L0003:
;	ldy     #$01
;	lda     (sp),y
;	bne     L0005
;	lda     (sp)
	cmp     #$13
	bne     L0005
	jsr     _c_getch
L0005:
;	jmp     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ do_cmd (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_cmd: near

.segment	"CODE"

	ldy     #$0D
	jsr     subysp
	jsr     _breakCheck
	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	ldx     #$00
	lda     (ptr1)
	ldy     #$0B
	jsr     staxysp
	inc     _pc
	bne     L0002
	inc     _pc+1
L0002:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	ldy     #$09
	jsr     staxysp
	ldy     #$0C
	jsr     ldaxysp
	cpx     #$00
	jne     L0004
	cmp     #$00
	beq     L0005
	cmp     #$22
	beq     L0007
	cmp     #$2F
	beq     L0008
	cmp     #$3F
	beq     L000D
	cmp     #$40
	beq     L0009
	cmp     #$5C
	beq     L000E
	cmp     #$5D
	beq     L0006
	bra     L0004
L0005:	jsr     _topOfLine
	ldx     #$00
	lda     #$01
	jmp     L0001
L0006:	jsr     _pop
	ldy     #$01
	jsr     staxysp
	sta     _pc
	stx     _pc+1
	jmp     L002C
L0007:	jsr     _do_pr
	jmp     L002C
L0008:	jsr     _newline
	jmp     L002C
L0009:	ldy     #$0A
	lda     (sp),y
	bne     L000A
	dey
	lda     (sp),y
	cmp     #$3D
	bne     L000A
	lda     _pc
	ldx     _pc+1
	ina
	bne     L000C
	inx
L000C:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1)
	ldy     #$07
	jsr     staxysp
	jsr     _operand
	ldy     #$05
	jsr     staxysp
	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     _do_until
	jmp     L002C
L000A:	jsr     _do_do
	jmp     L002C
L000D:	ldy     #$0A
	jsr     ldaxysp
	jsr     _do_prNum
	jmp     L002C
L000E:	jsr     _mach_fin
L0004:	ldy     #$0A
	lda     (sp),y
	jne     L0012
	dey
	lda     (sp),y
	cmp     #$3D
	jne     L0012
	ldy     #$0C
	jsr     ldaxysp
	cpx     #$00
	jne     L0012
	cmp     #$21
	beq     L0014
	cmp     #$23
	beq     L0013
	cmp     #$24
	beq     L0015
	cmp     #$26
	beq     L0019
	cmp     #$27
	beq     L0018
	cmp     #$2E
	beq     L0016
	cmp     #$3B
	beq     L0017
	bra     L0012
L0013:	jsr     _operand
	ldy     #$05
	jsr     staxysp
	jsr     _do_goto
	jmp     L002C
L0014:	jsr     _operand
	ldy     #$05
	jsr     staxysp
	jsr     _do_gosub
	jmp     L002C
L0015:	jsr     _operand
	ldy     #$05
	jsr     staxysp
	jsr     _c_putch
	jmp     L002C
L0016:	jsr     _operand
	ldy     #$05
	jsr     staxysp
	jsr     _do_prSpc
	jmp     L002C
L0017:	jsr     _operand
	ldy     #$05
	jsr     staxysp
	jsr     _do_if
	jmp     L002C
L0018:	jsr     _operand
	ldy     #$05
	jsr     staxysp
	jsr     _srand
	jmp     L002C
L0019:	jsr     _operand
	ldy     #$05
	jsr     staxysp
	cpx     #$00
	jne     L002C
	cmp     #$00
	jne     L0027
	jsr     _newText
	jmp     L002C
L0012:	jsr     _skipAlpha
	sta     (sp)
	cmp     #$3A
	beq     L0028
	lda     (sp)
	cmp     #$28
	jne     L001C
L0028:	inc     _pc
	bne     L001F
	inc     _pc+1
L001F:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L0020
	inc     _pc+1
L0020:	jsr     _expr
	ldy     #$03
	jsr     staxysp
	lda     _pc
	ldx     _pc+1
	jsr     decax1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$29
	beq     L0021
	lda     #<(S0005)
	ldx     #>(S0005)
	jsr     _er_boot
L0021:	jsr     _operand
	ldy     #$05
	jsr     staxysp
	ldx     #$00
	lda     (sp)
	cmp     #$3A
	bne     L002A
	ldy     #$0C
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_var)
	tay
	txa
	adc     #>(_var)
	tax
	tya
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	ldy     #$04
	jsr     ldaxysp
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	ldy     #$05
	lda     (sp),y
	sta     (ptr1)
	jmp     L0027
L002A:	lda     (sp)
	cmp     #$28
	jne     L0027
	ldy     #$0C
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_var)
	tay
	txa
	adc     #>(_var)
	tax
	tya
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	ldy     #$04
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$06
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	bra     L002C
L001C:	jsr     _operand
	ldy     #$05
	jsr     staxysp
	ldy     #$0C
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_var)
	sta     ptr1
	txa
	adc     #>(_var)
	sta     ptr1+1
	ldy     #$06
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	lda     _pc
	ldx     _pc+1
	jsr     decax1
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1)
	cmp     #$2C
	bne     L0027
	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	ldy     #$0B
	jsr     staxysp
	inc     _pc
	bne     L0026
	inc     _pc+1
L0026:	ldy     #$0B
	lda     (sp),y
	jsr     _expr
	ldy     #$05
	jsr     staxysp
	lda     _pc
	ldx     _pc+1
	jsr     _push
	ldy     #$06
	jsr     ldaxysp
	jsr     _push
L002C:	ldx     #$00
L0027:	txa
L0001:	ldy     #$0D
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; int __near__ pop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pop: near

.segment	"CODE"

	ldx     _sp+1
	cpx     #$80
	bcc     L0002
	lda     #<(S0007)
	ldx     #>(S0007)
	jsr     _er_boot
L0002:	lda     _sp
	ldx     _sp+1
	jsr     aslax1
	clc
	adc     #<(_stack)
	tay
	txa
	adc     #>(_stack)
	tax
	tya
	jsr     ldaxi
	sta     regsave
	stx     regsave+1
	lda     _sp
	bne     L0003
	dec     _sp+1
L0003:	dec     _sp
	lda     regsave
	ldx     regsave+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ do_pr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_pr: near

.segment	"CODE"

	jsr     decsp2
L0005:	lda     #$22
	jsr     pusha0
	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	ldy     #$02
	jsr     staxysp
	jsr     toseqa0
	php
	inc     _pc
	bne     L0007
	inc     _pc+1
L0007:	plp
	bne     L0003
	lda     (sp)
	ldy     #$01
	ora     (sp),y
	bne     L000B
	lda     _pc
	bne     L000A
	dec     _pc+1
L000A:	dec     _pc
	jmp     incsp2
L000B:	jsr     ldax0sp
	jsr     _c_putch
	bra     L0005
L0003:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ operand (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_operand: near

.segment	"CODE"

	jsr     decsp4
L0005:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	ldx     #$00
	lda     (ptr1)
	ldy     #$02
	jsr     staxysp
	inc     _pc
	bne     L0006
	inc     _pc+1
L0006:	ldy     #$03
	lda     (sp),y
	bne     L000B
	dey
	lda     (sp),y
	cmp     #$3D
	beq     L0003
L000B:	ldy     #$02
	lda     (sp),y
	and     #$DF
	bne     L0005
	lda     #<(S0009)
	ldx     #>(S0009)
	jsr     _errMsg
	bra     L0005
L0003:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	ldy     #$02
	jsr     staxysp
	inc     _pc
	bne     L000A
	inc     _pc+1
L000A:	ldy     #$02
	lda     (sp),y
	jsr     _expr
	jsr     stax0sp
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ do_until (int e, int val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_until: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     #<(_var)
	sta     ptr1
	txa
	adc     #>(_var)
	sta     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	ldy     #$05
	jsr     pushwysp
	lda     _sp
	ldx     _sp+1
	jsr     aslax1
	clc
	adc     #<(_stack)
	tay
	txa
	adc     #>(_stack)
	tax
	tya
	jsr     ldaxi
	jsr     tosicmp
	bmi     L0002
	beq     L0002
	lda     _sp
	sec
	sbc     #$02
	sta     _sp
	bcs     L0001
	dec     _sp+1
	jmp     incsp4
L0002:	lda     _sp
	ldx     _sp+1
	jsr     decax1
	jsr     aslax1
	clc
	adc     #<(_stack)
	tay
	txa
	adc     #>(_stack)
	tax
	tya
	jsr     ldaxi
	sta     _pc
	stx     _pc+1
L0001:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ do_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_do: near

.segment	"CODE"

	lda     _pc
	ldx     _pc+1
	jsr     _push
	ldx     #$00
	txa
	jmp     _push

.endproc

; ---------------------------------------------------------------
; void __near__ do_prNum (int c1)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_prNum: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp4
	ldy     #$05
	lda     (sp),y
	bne     L0002
	dey
	lda     (sp),y
	cmp     #$28
	bne     L0002
	inc     _pc
	bne     L000D
	inc     _pc+1
L000D:	lda     (sp),y
	jsr     _term
	jsr     stax0sp
	jsr     _operand
	ldy     #$02
	jsr     staxysp
	lda     #<(_lky_buf)
	ldx     #>(_lky_buf)
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	jsr     _mk_dStr
	bra     L0006
L0002:	jsr     _operand
	ldy     #$02
	jsr     staxysp
	ldy     #$05
	jsr     ldaxysp
	cpx     #$00
	bne     L000A
	cmp     #$24
	beq     L0008
	cmp     #$3D
	beq     L0009
	cmp     #$3F
	bne     L000A
	lda     #<(_lky_buf)
	ldx     #>(_lky_buf)
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldx     #$00
	lda     #$04
	jsr     _g_hexStr
	bra     L0006
L0008:	lda     #<(_lky_buf)
	ldx     #>(_lky_buf)
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldx     #$00
	lda     #$02
	jsr     _g_hexStr
	bra     L0006
L0009:	lda     #<(_lky_buf)
	ldx     #>(_lky_buf)
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldx     #$00
	lda     #$01
	jsr     _mk_dStr
	bra     L0006
L000A:	lda     #<(S0006)
	ldx     #>(S0006)
	jsr     _er_boot
L0006:	lda     #<(_lky_buf)
	ldx     #>(_lky_buf)
	jsr     _c_puts
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ do_goto (int n)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_goto: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp4
	ldy     #$05
	lda     (sp),y
	cmp     #$FF
	bne     L0004
	dey
	lda     (sp),y
	cmp     #$FF
	bne     L0004
	ldx     #$00
	txa
	jsr     _w_boot
L0004:	ldy     #$07
	jsr     pushwysp
	lda     #$04
	jsr     leaa0sp
	jsr     _searchLine
	jsr     stax0sp
	sta     _pc
	stx     _pc+1
	jsr     _topOfLine
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ do_gosub (int n)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_gosub: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp4
	ldy     #$07
	jsr     pushwysp
	lda     #$04
	jsr     leaa0sp
	jsr     _searchLine
	jsr     stax0sp
	lda     _pc
	ldx     _pc+1
	jsr     _push
	jsr     ldax0sp
	sta     _pc
	stx     _pc+1
	jsr     _topOfLine
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ do_prSpc (int e)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_prSpc: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp2
	ldx     #$00
	txa
	jsr     stax0sp
L0002:	jsr     ldax0sp
	ldy     #$02
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L0006
	eor     #$80
L0006:	bpl     L0003
	ldx     #$00
	lda     #$20
	jsr     _c_putch
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	bra     L0002
L0003:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ do_if (int e)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_if: near

.segment	"CODE"

	jsr     pushax
	lda     (sp)
	ldy     #$01
	ora     (sp),y
	bne     L0002
	lda     _pc
	ldx     _pc+1
	jsr     _skipLine
	sta     _pc
	stx     _pc+1
	jsr     _topOfLine
L0002:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ newText (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_newText: near

.segment	"CODE"

	lda     _var+76+1
	sta     ptr1+1
	lda     _var+76
	sta     ptr1
	lda     (ptr1)
	cmp     #$FF
	beq     L0002
	lda     _t_lock
	ldx     _t_lock+1
	jsr     _er_boot
L0002:	jmp     _newText1

.endproc

; ---------------------------------------------------------------
; int __near__ expr (unsigned char c)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_expr: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp8
	ldy     #$08
	lda     (sp),y
	jsr     _term
L0031:	jsr     stax0sp
L0005:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	ldx     #$00
	lda     (ptr1)
	ldy     #$06
	jsr     staxysp
	inc     _pc
	bne     L0006
	inc     _pc+1
L0006:	ldy     #$07
	jsr     ldaxysp
	cpx     #$00
	jne     L002F
	cmp     #$00
	beq     L0009
	cmp     #$20
	beq     L000B
	cmp     #$29
	beq     L000B
	cmp     #$2A
	jeq     L0022
	cmp     #$2B
	jeq     L001A
	cmp     #$2C
	beq     L000B
	cmp     #$2D
	jeq     L0020
	cmp     #$2F
	jeq     L0024
	cmp     #$3C
	beq     L000E
	cmp     #$3D
	jeq     L0026
	cmp     #$3E
	jeq     L0011
	jmp     L002F
L0009:	lda     _pc
	bne     L000A
	dec     _pc+1
L000A:	dec     _pc
L000B:	jsr     ldax0sp
	jmp     L0003
L000E:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	ldy     #$04
	jsr     staxysp
	inc     _pc
	bne     L000F
	inc     _pc+1
L000F:	ldy     #$05
	jsr     ldaxysp
	cpx     #$00
	bne     L0016
	cmp     #$3D
	beq     L0014
	cmp     #$3E
	bne     L0016
	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L0013
	inc     _pc+1
L0013:	jsr     _term
	ldy     #$02
	jsr     staxysp
	jsr     ldax0sp
	ldy     #$02
	cmp     (sp),y
	bne     L0029
	txa
	iny
	cmp     (sp),y
L0029:	jsr     boolne
	jmp     L0031
L0014:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L0015
	inc     _pc+1
L0015:	jsr     _term
	ldy     #$02
	jsr     staxysp
	jsr     pushw0sp
	ldy     #$05
	jsr     ldaxysp
	jsr     tosleax
	jmp     L0031
L0016:	ldy     #$04
	lda     (sp),y
	jsr     _term
	ldy     #$02
	jsr     staxysp
	jsr     ldax0sp
	ldy     #$02
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L002A
	eor     #$80
L002A:	asl     a
	lda     #$00
	tax
	rol     a
	jmp     L0031
L0011:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	ldy     #$04
	jsr     staxysp
	inc     _pc
	bne     L0018
	inc     _pc+1
L0018:	ldy     #$05
	lda     (sp),y
	bne     L001D
	dey
	lda     (sp),y
	cmp     #$3D
	bne     L002E
	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L001C
	inc     _pc+1
L001C:	jsr     _term
	ldy     #$02
	jsr     staxysp
	jsr     ldax0sp
	ldy     #$02
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvs     L002B
	eor     #$80
L002B:	asl     a
	lda     #$00
	tax
	rol     a
	jmp     L0031
L001D:	dey
L002E:	lda     (sp),y
	jsr     _term
	ldy     #$02
	jsr     staxysp
	jsr     pushw0sp
	ldy     #$05
	jsr     ldaxysp
	jsr     tosgtax
	jmp     L0031
L001A:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L001F
	inc     _pc+1
L001F:	jsr     _term
	ldy     #$02
	jsr     staxysp
	clc
	adc     (sp)
	pha
	txa
	ldy     #$01
	adc     (sp),y
	tax
	pla
	jmp     L0031
L0020:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L0021
	inc     _pc+1
L0021:	jsr     _term
	ldy     #$02
	jsr     staxysp
	jsr     ldax0sp
	sec
	ldy     #$02
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jmp     L0031
L0022:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L0023
	inc     _pc+1
L0023:	jsr     _term
	ldy     #$02
	jsr     staxysp
	jsr     pushw0sp
	ldy     #$05
	jsr     ldaxysp
	jsr     tosmulax
	jmp     L0031
L0024:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L0025
	inc     _pc+1
L0025:	jsr     _term
	ldy     #$02
	jsr     staxysp
	jsr     pushw0sp
	ldy     #$05
	jsr     ldaxysp
	jsr     tosmodax
	sta     _var+74
	stx     _var+74+1
	jsr     pushw0sp
	ldy     #$05
	jsr     ldaxysp
	jsr     tosdivax
	jmp     L0031
L0026:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L0027
	inc     _pc+1
L0027:	jsr     _term
	ldy     #$02
	jsr     staxysp
	jsr     ldax0sp
	ldy     #$02
	cmp     (sp),y
	bne     L002C
	txa
	iny
	cmp     (sp),y
L002C:	jsr     booleq
	jmp     L0031
L002F:	lda     #$20
	sta     _mm
	ldy     #$06
	lda     (sp),y
	sta     _mm+1
	lda     #$3F
	sta     _mm+2
	stz     _mm+3
	lda     #<(_mm)
	ldx     #>(_mm)
	jsr     _errMsg
	jmp     L0005
L0003:	ldy     #$09
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ push (int x)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_push: near

.segment	"CODE"

	jsr     pushax
	lda     _sp
	cmp     #$63
	lda     _sp+1
	sbc     #$00
	bvs     L0003
	eor     #$80
L0003:	bpl     L0002
	lda     #<(S0008)
	ldx     #>(S0008)
	jsr     _er_boot
L0002:	inc     _sp
	bne     L0004
	inc     _sp+1
L0004:	lda     _sp
	ldx     _sp+1
	jsr     aslax1
	clc
	adc     #<(_stack)
	sta     ptr1
	txa
	adc     #>(_stack)
	sta     ptr1+1
	jsr     ldax0sp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ term (unsigned char c)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_term: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp2
	jsr     push0
	jsr     decsp3
	ldy     #$07
	lda     (sp),y
	cmp     #$22
	jeq     L0019
	cmp     #$23
	jeq     L0010
	cmp     #$24
	beq     L0004
	cmp     #$25
	jeq     L0015
	cmp     #$27
	jeq     L0012
	cmp     #$28
	beq     L0007
	cmp     #$2B
	beq     L000A
	cmp     #$2D
	jeq     L000E
	cmp     #$3F
	jeq     L0017
	jmp     L0034
L0004:	lda     #$03
	jsr     leaa0sp
	jsr     _getHex
	ldy     #$05
	jsr     staxysp
	ldy     #$03
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L0005
	jsr     _c_getch
	jmp     incsp8
L0005:	ldy     #$06
	jsr     ldaxysp
	jmp     incsp8
L0007:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L0008
	inc     _pc+1
L0008:	jsr     _expr
	ldy     #$05
	jsr     staxysp
	lda     _pc
	ldx     _pc+1
	jsr     decax1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$29
	beq     L0009
	lda     #<(S000A)
	ldx     #>(S000A)
	jsr     _errMsg
L0009:	ldy     #$06
	jsr     ldaxysp
	jmp     incsp8
L000A:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L000B
	inc     _pc+1
L000B:	jsr     _term
	ldy     #$05
	jsr     staxysp
	cpx     #$80
	bcc     L000C
	ldy     #$06
	jsr     ldaxysp
	jsr     negax
	jmp     incsp8
L000C:	ldy     #$06
	jsr     ldaxysp
	jmp     incsp8
L000E:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L000F
	inc     _pc+1
L000F:	jsr     _term
	jsr     negax
	jmp     incsp8
L0010:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L0011
	inc     _pc+1
L0011:	jsr     _term
	jsr     bnegax
	jmp     incsp8
L0012:	jsr     _rand
	jsr     pushax
	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L0013
	inc     _pc+1
L0013:	jsr     _term
	jsr     tosmodax
	ina
	jne     L0001
	inx
	jmp     incsp8
L0015:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L0016
	inc     _pc+1
L0016:	jsr     _term
	ldy     #$05
	jsr     staxysp
	lda     _var+74
	ldx     _var+74+1
	jmp     incsp8
L0017:	lda     #<(_lky_buf)
	ldx     #>(_lky_buf)
	jsr     _c_gets
	lda     _pc
	ldx     _pc+1
	jsr     stax0sp
	lda     #<(_lky_buf)
	ldx     #>(_lky_buf)
	sta     _pc
	stx     _pc+1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	inc     _pc
	bne     L0018
	inc     _pc+1
L0018:	jsr     _expr
	ldy     #$05
	jsr     staxysp
	jsr     ldax0sp
	sta     _pc
	stx     _pc+1
	ldy     #$06
	jsr     ldaxysp
	jmp     incsp8
L0019:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	ldy     #$05
	jsr     staxysp
	inc     _pc
	bne     L001A
	inc     _pc+1
L001A:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	cmp     #$22
	jsr     boolne
	php
	inc     _pc
	bne     L001C
	inc     _pc+1
L001C:	plp
	beq     L001B
	lda     #<(S000B)
	ldx     #>(S000B)
	jsr     _errMsg
L001B:	ldy     #$06
	jsr     ldaxysp
	jmp     incsp8
L0034:	lda     #$30
	cmp     (sp),y
	beq     L0036
	bcs     L001D
L0036:	lda     (sp),y
	cmp     #$3A
	bcs     L001D
	lda     _pc
	bne     L0021
	dec     _pc+1
L0021:	dec     _pc
	lda     #$03
	jsr     leaa0sp
	jsr     _getNum
	ldy     #$05
	jsr     staxysp
	jmp     incsp8
L001D:	jsr     _skipAlpha
	ldy     #$02
	sta     (sp),y
	cmp     #$3A
	beq     L0039
	lda     (sp),y
	cmp     #$28
	jne     L0029
L0039:	inc     _pc
	bne     L0025
	inc     _pc+1
L0025:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	inc     _pc
	bne     L0026
	inc     _pc+1
L0026:	jsr     _expr
	ldy     #$05
	jsr     staxysp
	lda     _pc
	ldx     _pc+1
	jsr     decax1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$29
	beq     L0027
	lda     #<(S000C)
	ldx     #>(S000C)
	jsr     _errMsg
L0027:	ldy     #$02
	lda     (sp),y
	cmp     #$28
	beq     L002B
	cmp     #$3A
	bne     L0029
	ldy     #$07
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0030
	inx
	clc
L0030:	adc     #<(_var)
	tay
	txa
	adc     #>(_var)
	tax
	tya
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	ldy     #$06
	jsr     ldaxysp
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1)
	jmp     incsp8
L002B:	ldy     #$07
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0031
	inx
	clc
L0031:	adc     #<(_var)
	tay
	txa
	adc     #>(_var)
	tax
	tya
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	ldy     #$06
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	bra     L003A
L0029:	ldy     #$07
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0032
	inx
	clc
L0032:	adc     #<(_var)
	tay
	txa
	adc     #>(_var)
	tax
	tya
L003A:	jsr     ldaxi
L0001:	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ errMsg (s) unsigned char *s;
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_errMsg: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp8
	lda     #<(S000D)
	ldx     #>(S000D)
	jsr     _c_puts
	ldy     #$09
	jsr     ldaxysp
	jsr     _c_puts
	lda     _lno
	ora     _lno+1
	beq     L0002
	lda     #<(S000E)
	ldx     #>(S000E)
	jsr     _c_puts
	lda     sp
	ldx     sp+1
	jsr     pushax
	lda     _lno
	ldx     _lno+1
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     _mk_dStr
	lda     sp
	ldx     sp+1
	jsr     _c_puts
L0002:	ldx     #$00
	txa
	jsr     _w_boot
	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; int __near__ getHex (f) int *f;
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getHex: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp2
	jsr     push0
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$01
	sta     (ptr1),y
	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	ldx     #$00
	lda     (ptr1)
	iny
	jsr     staxysp
	jmp     L0022
L0002:	jsr     ldax0sp
	jsr     aslax4
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	cmp     #$41
	txa
	sbc     #$00
	bvc     L0013
	eor     #$80
L0013:	bpl     L0014
	ldy     #$03
	jsr     ldaxysp
	ldy     #$30
	jsr     decaxy
	bra     L0015
L0014:	ldy     #$03
	jsr     ldaxysp
	cmp     #$61
	txa
	sbc     #$00
	bvc     L0016
	eor     #$80
L0016:	bpl     L0017
	ldy     #$03
	jsr     ldaxysp
	ldy     #$41
	bra     L001E
L0017:	ldy     #$03
	jsr     ldaxysp
	ldy     #$61
L001E:	jsr     decaxy
	ldy     #$0A
	jsr     incaxy
L0015:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     stax0sp
	inc     _pc
	bne     L0019
	inc     _pc+1
L0019:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	ldx     #$00
	lda     (ptr1)
	ldy     #$02
	jsr     staxysp
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$01
	sta     (ptr1)
	tay
	dea
	sta     (ptr1),y
L0022:	lda     #$30
	jsr     pusha0
	ldy     #$05
	jsr     ldaxysp
	jsr     tosicmp
	beq     L001F
	bpl     L0005
L001F:	ldy     #$03
	jsr     ldaxysp
	cmp     #$3A
	txa
	sbc     #$00
	bvc     L0006
	eor     #$80
L0006:	jmi     L0002
L0005:	lda     #$41
	jsr     pusha0
	ldy     #$05
	jsr     ldaxysp
	jsr     tosicmp
	beq     L0020
	bpl     L000A
L0020:	ldy     #$03
	jsr     ldaxysp
	cmp     #$47
	txa
	sbc     #$00
	bvc     L000B
	eor     #$80
L000B:	jmi     L0002
L000A:	lda     #$61
	jsr     pusha0
	ldy     #$05
	jsr     ldaxysp
	jsr     tosicmp
	beq     L0021
	bpl     L001D
L0021:	ldy     #$03
	jsr     ldaxysp
	cmp     #$67
	txa
	sbc     #$00
	bvc     L000F
	eor     #$80
L000F:	jmi     L0002
L001D:	jsr     ldax0sp
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ memmove (void *dest, const void *src, int n)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_memmove: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp4
	ldy     #$09
	jsr     ldaxysp
	sec
	ldy     #$06
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	beq     L000A
	bcs     L0002
L000A:	ldy     #$09
	jsr     ldaxysp
	ldy     #$02
	jsr     staxysp
	ldy     #$07
	jsr     ldaxysp
	jsr     stax0sp
	bra     L0005
L0003:	ldy     #$03
	jsr     ldaxysp
	sta     sreg
	stx     sreg+1
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     (sreg)
	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
L0005:	ldy     #$05
	lda     (sp),y
	dey
	ora     (sp),y
	php
	ldx     #$00
	lda     #$01
	jsr     subeqysp
	plp
	bne     L0003
	bra     L0008
L0002:	ldy     #$09
	jsr     ldaxysp
	ldy     #$02
	jsr     staxysp
	ldy     #$05
	jsr     ldaxysp
	ldy     #$02
	jsr     addeqysp
	ldy     #$07
	jsr     ldaxysp
	jsr     stax0sp
	ldy     #$05
	jsr     ldaxysp
	jsr     addeq0sp
	bra     L0009
L0007:	ldx     #$00
	lda     #$01
	ldy     #$02
	jsr     subeqysp
	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     #$01
	jsr     subeq0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     (sreg)
L0009:	ldy     #$05
	lda     (sp),y
	dey
	ora     (sp),y
	php
	ldx     #$00
	lda     #$01
	jsr     subeqysp
	plp
	bne     L0007
L0008:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ strcpy (unsigned char *p1, unsigned char *p2)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_strcpy: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp2
	lda     #$00
	sta     (sp)
	bra     L0004
L0002:	ldy     #$01
	lda     (sp),y
	cmp     #$22
	bne     L000B
	lda     (sp)
	eor     #$01
	sta     (sp)
	ldy     #$01
L000B:	lda     (sp),y
	cmp     #$61
	bcc     L0006
	cmp     #$7B
	bcs     L0006
	lda     (sp)
	bne     L0006
	ldy     #$01
	lda     (sp),y
	and     #$DF
	sta     (sp),y
L0006:	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	sta     (ptr1)
	ldy     #$04
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L0004:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	ldy     #$01
	sta     (sp),y
	cmp     #$00
	jsr     boolne
	php
	iny
	lda     #$01
	jsr     addeqysp
	plp
	bne     L0002
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ __cdecl__ main (unsigned char st_flg)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	pha

	jsr     decsp6
;	ldy     #$06
;	lda     (sp),y

	pla

	bne     L0002

	ldx     #$19
	lda     #$66
	jsr     _srand
	lda     #>(_text_buf)
	sta     _var+122+1
	lda     #<(_text_buf)
	sta     _var+122
	ldx     #$7F
	lda     #$FF
	sta     _var+84
	stx     _var+84+1
	jsr     _newText1
	lda     _open_msg
	ldx     _open_msg+1
	jsr     _c_puts
L0002:	lda     _rdy_msg
	ldx     _rdy_msg+1
	jsr     _c_puts
L0006:	lda     #$FF
	sta     _sp
	sta     _sp+1
	stz     _lno
	stz     _lno+1
	lda     #<(_lin)
	ldx     #>(_lin)
	jsr     _c_gets
	jsr     stax0sp
	clc
	adc     #<(_lin)
	tay
	txa
	adc     #>(_lin)
	tax
	tya
	ina
	bne     L0007
	inx
L0007:	sta     ptr1
	stx     ptr1+1
	lda     #$80
	sta     (ptr1)
	lda     #>(_lin)
	sta     _pc+1
	lda     #<(_lin)
	sta     _pc
	jsr     _skipBlank
	lda     #$02
	jsr     leaa0sp
	jsr     _getNum
	ldy     #$04
	jsr     staxysp
	ldy     #$02
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L0008
	jsr     _exqt
	jsr     _newline
	bra     L0002
L0008:	ldy     #$05
	jsr     ldaxysp
	jsr     _edit
	bra     L0006

.endproc

; ---------------------------------------------------------------
; unsigned char *__near__ skipLine (p) unsigned char *p;
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_skipLine: near

.segment	"CODE"

	jsr     pushax
L0002:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	beq     L0003
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	bra     L0002
L0003:	jsr     ldax0sp
	ina
	bne     L0001
	inx
L0001:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char *__near__ searchLine (n, f) int n; int *f;
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_searchLine: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp4
	lda     _var+122
	ldx     _var+122+1
L000E:	ldy     #$02
	jsr     staxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	and     #$80
	bne     L0003
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     sreg+1
	ldy     #$03
	jsr     ldaxysp
	ina
	bne     L0006
	inx
L0006:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	ldx     sreg+1
	jsr     stax0sp
	ldy     #$07
	jsr     ldaxysp
	cmp     (sp)
	bne     L0007
	txa
	ldy     #$01
	cmp     (sp),y
	bne     L0007
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$01
	sta     (ptr1)
	tay
	dea
	bra     L000F
L0007:	ldy     #$07
	jsr     ldaxysp
	cmp     (sp)
	txa
	ldy     #$01
	sbc     (sp),y
	bvc     L000A
	eor     #$80
L000A:	bmi     L0003
	ldy     #$03
	jsr     ldaxysp
	jsr     incax2
	jsr     _skipLine
	bra     L000E
L0003:	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$01
L000F:	sta     (ptr1),y
	ldy     #$03
	jsr     ldaxysp
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; int __near__ g_decStr (unsigned char *buf, unsigned int num)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_g_decStr: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp2
	ldx     #$00
	txa
	jsr     stax0sp
L0002:	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	lda     #$0A
	jsr     tosumoda0
	ora     #$30
	ldy     #$00
	jsr     staspidx
	ldy     #$04
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$05
	jsr     pushwysp
	lda     #$0A
	jsr     tosudiva0
	ldy     #$02
	jsr     staxysp
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	ldy     #$02
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L0002
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
	jsr     ldax0sp
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ mk_dStr (unsigned char *d_buf, unsigned int num, int digit)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_mk_dStr: near

.segment	"CODE"

	jsr     pushax
	ldy     #$10
	jsr     subysp
	ldx     #$00
	txa
	jsr     stax0sp
	ldy     #$13
	jsr     ldaxysp
	txa
	and     #$80
	beq     L0002
	ldx     #$00
	lda     #$01
	jsr     stax0sp
	ldy     #$13
	jsr     ldaxysp
	jsr     complax
	ina
	bne     L0003
	inx
L0003:	ldy     #$12
	jsr     staxysp
L0002:	lda     #$08
	jsr     leaa0sp
	jsr     pushax
	ldy     #$15
	jsr     ldaxysp
	jsr     _g_decStr
	ldy     #$02
	jsr     staxysp
	ldy     #$04
	jsr     staxysp
	ldy     #$01
	lda     (sp),y
	ora     (sp)
	beq     L0004
	iny
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L0004:	ldx     #$00
	txa
	ldy     #$06
	jsr     staxysp
	bra     L0007
L0005:	ldy     #$07
	jsr     ldaxysp
	clc
	ldy     #$14
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$20
	sta     (ptr1)
	ldy     #$06
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldx     #$00
	lda     #$01
	ldy     #$10
	jsr     subeqysp
L0007:	ldy     #$13
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	jsr     tosicmp
	beq     L000C
	bpl     L0005
L000C:	ldy     #$01
	lda     (sp),y
	ora     (sp)
	beq     L000B
	ldy     #$07
	jsr     ldaxysp
	clc
	ldy     #$14
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$2D
	sta     (ptr1)
	ldy     #$06
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L000B
L0009:	ldy     #$07
	jsr     ldaxysp
	clc
	ldy     #$14
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	jsr     decax1
	ldy     #$0A
	jsr     incaxy
	jsr     leaaxsp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1)
	jsr     staspidx
	ldy     #$06
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldx     #$00
	lda     #$01
	ldy     #$04
	jsr     subeqysp
L000B:	ldy     #$05
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L0009
	ldy     #$07
	jsr     ldaxysp
	clc
	ldy     #$14
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	iny
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ g_hexStr (unsigned char *buf, unsigned short num, int cnt)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_g_hexStr: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp5
	ldy     #$06
	lda     (sp),y
	bne     L0002
	dey
	lda     (sp),y
	cmp     #$04
	bne     L0002
	ldx     #$F0
	lda     #$00
	bra     L000E
L0002:	ldx     #$00
	lda     #$F0
L000E:	jsr     stax0sp
	ldy     #$06
	jsr     ldaxysp
	jsr     decax1
	jsr     aslax2
	ldy     #$03
	jsr     staxysp
L0005:	jsr     ldax0sp
	ldy     #$07
	and     (sp),y
	sta     ptr1
	txa
	iny
	and     (sp),y
	sta     ptr1+1
	ldy     #$03
	lda     (sp),y
	tay
	lda     ptr1
	ldx     ptr1+1
	jsr     shraxy
	ldy     #$02
	sta     (sp),y
	jsr     ldax0sp
	jsr     shrax4
	jsr     stax0sp
	ldy     #$02
	lda     (sp),y
	cmp     #$0A
	bcc     L0010
	clc
	lda     #$37
	bra     L000F
L0010:	lda     #$30
L000F:	adc     (sp),y
	sta     (sp),y
	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (sp),y
	sta     (ptr1)
	ldy     #$09
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldx     #$00
	lda     #$04
	ldy     #$03
	jsr     subeqysp
	ldy     #$04
	jsr     ldaxysp
	txa
	bpl     L0005
	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$0B
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned char *__near__ dispLine (p) unsigned char *p;
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_dispLine: near

.segment	"CODE"

	jsr     pushax
	ldy     #$0A
	jsr     subysp
	ldy     #$0B
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     sreg+1
	ldy     #$0B
	jsr     ldaxysp
	ina
	bne     L0002
	inx
L0002:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	ldx     sreg+1
	ldy     #$08
	jsr     staxysp
	ldy     #$0A
	ldx     #$00
	lda     #$02
	jsr     addeqysp
	lda     sp
	ldx     sp+1
	jsr     pushax
	ldy     #$0D
	jsr     pushwysp
	ldx     #$00
	lda     #$05
	jsr     _mk_dStr
	lda     sp
	ldx     sp+1
	jsr     _c_puts
L0003:	ldy     #$0B
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	beq     L0004
	ldy     #$0B
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1)
	sta     regsave
	stz     regsave+1
	ldy     #$0A
	lda     #$01
	jsr     addeqysp
	lda     regsave
	ldx     regsave+1
	jsr     _c_putch
	bra     L0003
L0004:	jsr     _newline
	ldy     #$0B
	jsr     ldaxysp
	ina
	bne     L0001
	inx
L0001:	ldy     #$0C
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ skipAlpha (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_skipAlpha: near

.segment	"CODE"

	jsr     decsp1
L0005:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	sta     (sp)
	cmp     #$41
	bcc     L0012
	lda     #$7A
	cmp     (sp)
	bcc     L0012
	lda     #$5A
	cmp     (sp)
	bcs     L0006
	ldx     #$00
	lda     (sp)
	cmp     #$61
	bcc     L0015
	bra     L0006
L0012:	ldx     #$00
L0015:	lda     (sp)
	jmp     incsp1
L0006:	inc     _pc
	bne     L0005
	inc     _pc+1
	bra     L0005

.endproc

; ---------------------------------------------------------------
; void __near__ topOfLine (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_topOfLine: near

.segment	"CODE"

	jsr     decsp2
L0002:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	ldx     #$00
	lda     (ptr1)
	jsr     stax0sp
	inc     _pc
	bne     L0003
	inc     _pc+1
L0003:	lda     (sp)
	and     #$80
	beq     L0004
	txa
	jsr     _w_boot
L0004:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	sta     _lno
	lda     (sp)
	sta     _lno+1
	inc     _pc
	bne     L0005
	inc     _pc+1
L0005:	lda     _pc+1
	sta     ptr1+1
	lda     _pc
	sta     ptr1
	lda     (ptr1)
	cmp     #$20
	beq     L0006
	lda     _pc
	ldx     _pc+1
	jsr     _skipLine
	sta     _pc
	stx     _pc+1
	bra     L0002
L0006:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ c_isprint (unsigned char c)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_c_isprint: near

.segment	"CODE"

	jsr     pusha
	lda     (sp)
	cmp     #$20
	lda     #$00
	tax
	bcc     L0008
	lda     (sp)
	cmp     #$7F
	bcc     L0007
	txa
	jmp     incsp1
L0007:	lda     #$01
L0008:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ c_isspace (unsigned char c)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_c_isspace: near

.segment	"CODE"

	jsr     pusha
	lda     (sp)
	cmp     #$20
	beq     L000C
	ldx     #$00
	lda     (sp)
	cmp     #$0E
	bcs     L0008
	cmp     #$09
	bcs     L0009
L0008:	txa
	jmp     incsp1
L0009:	lda     #$01
	jmp     incsp1
L000C:	lda     #$01
	ldx     #$00
	jmp     incsp1

.endproc

