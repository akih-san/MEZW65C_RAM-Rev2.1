;
; File generated by cc65 v 2.19 - Git 03d824e
;
	.fopt		compiler,"cc65 v 2.19 - Git 03d824e"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
;	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_c_kbhit
	.import		_c_getch
	.import		_c_putch
	.import		_srand
	.import		_rand
	.export		_main
	.export		_newline
	.export		_err
	.export		_warm_start
	.export		_error

;.segment	"DATA"
.segment	"RODATA"

_kwtbl:
	.addr	S0001
	.addr	S0002
	.addr	S0003
	.addr	S0004
	.addr	S0005
	.addr	S0006
	.addr	S0007
	.addr	S0008
	.addr	S0009
	.addr	S000A
	.addr	S000B
	.addr	S000C
	.addr	S000D
	.addr	S000E
	.addr	S000F
	.addr	S0010
	.addr	S0011
	.addr	S0012
	.addr	S0013
	.addr	S0014
	.addr	S0015
	.addr	S0016
	.addr	S0017
	.addr	S0018
	.addr	S0019
	.addr	S001A
	.addr	S001B
	.addr	S001C
	.addr	S001D
	.addr	S001E
	.addr	S001F
	.addr	S0020
	.addr	S0021
	.addr	S0022
	.addr	S0023
_errmsg:
	.addr	S0024
	.addr	S0025
	.addr	S0026
	.addr	S0027
	.addr	S0028
	.addr	S0029
	.addr	S002A
	.addr	S002B
	.addr	S002C
	.addr	S002D
	.addr	S002E
	.addr	S002F
	.addr	S0030
	.addr	S0031
	.addr	S0032
	.addr	S0033
	.addr	S0034
	.addr	S0035
	.addr	S0036
	.addr	S0037
	.addr	S0038
	.addr	S0039
	.addr	S003A

.segment	"RODATA"

_i_nsa:
	.byte	$02
	.byte	$09
	.byte	$0d
	.byte	$0f
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1a
	.byte	$1b
	.byte	$1c
	.byte	$1d
	.byte	$1e
_i_nsb:
	.byte	$0f
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1a
	.byte	$0d
	.byte	$0e
	.byte	$26
S0027:
	.byte	$53,$75,$62,$73,$63,$72,$69,$70,$74,$20,$6F,$75,$74,$20,$6F,$66
	.byte	$20,$72,$61,$6E,$67,$65,$00
S002B:
	.byte	$52,$45,$54,$55,$52,$4E,$20,$73,$74,$61,$63,$6B,$20,$75,$6E,$64
	.byte	$65,$72,$66,$6C,$6F,$77,$00
S0034:
	.byte	$55,$6E,$64,$65,$66,$69,$6E,$65,$64,$20,$6C,$69,$6E,$65,$20,$6E
	.byte	$75,$6D,$62,$65,$72,$00
S002A:
	.byte	$47,$4F,$53,$55,$42,$20,$74,$6F,$6F,$20,$6D,$61,$6E,$79,$20,$6E
	.byte	$65,$73,$74,$65,$64,$00
S0032:
	.byte	$4C,$45,$54,$20,$77,$69,$74,$68,$6F,$75,$74,$20,$76,$61,$72,$69
	.byte	$61,$62,$6C,$65,$00
S0033:
	.byte	$49,$46,$20,$77,$69,$74,$68,$6F,$75,$74,$20,$63,$6F,$6E,$64,$69
	.byte	$74,$69,$6F,$6E,$00
S003F:
	.byte	$54,$4F,$59,$4F,$53,$48,$49,$4B,$49,$20,$54,$49,$4E,$59,$20,$42
	.byte	$41,$53,$49,$43,$00
S0030:
	.byte	$46,$4F,$52,$20,$77,$69,$74,$68,$6F,$75,$74,$20,$76,$61,$72,$69
	.byte	$61,$62,$6C,$65,$00
S002E:
	.byte	$4E,$45,$58,$54,$20,$77,$69,$74,$68,$6F,$75,$74,$20,$63,$6F,$75
	.byte	$6E,$74,$65,$72,$00
S002C:
	.byte	$46,$4F,$52,$20,$74,$6F,$6F,$20,$6D,$61,$6E,$79,$20,$6E,$65,$73
	.byte	$74,$65,$64,$00
S0035:
	.byte	$27,$28,$27,$20,$6F,$72,$20,$27,$29,$27,$20,$65,$78,$70,$65,$63
	.byte	$74,$65,$64,$00
S002F:
	.byte	$4E,$45,$58,$54,$20,$6D,$69,$73,$6D,$61,$74,$63,$68,$20,$46,$4F
	.byte	$52,$00
S0028:
	.byte	$49,$63,$6F,$64,$65,$20,$62,$75,$66,$66,$65,$72,$20,$66,$75,$6C
	.byte	$6C,$00
S0025:
	.byte	$44,$65,$76,$69,$73,$69,$6F,$6E,$20,$62,$79,$20,$7A,$65,$72,$6F
	.byte	$00
S002D:
	.byte	$4E,$45,$58,$54,$20,$77,$69,$74,$68,$6F,$75,$74,$20,$46,$4F,$52
	.byte	$00
S0037:
	.byte	$49,$6C,$6C,$65,$67,$61,$6C,$20,$63,$6F,$6D,$6D,$61,$6E,$64,$00
S003A:
	.byte	$41,$62,$6F,$72,$74,$20,$62,$79,$20,$5B,$45,$53,$43,$5D,$00
S0039:
	.byte	$49,$6E,$74,$65,$72,$6E,$61,$6C,$20,$65,$72,$72,$6F,$72,$00
S0031:
	.byte	$46,$4F,$52,$20,$77,$69,$74,$68,$6F,$75,$74,$20,$54,$4F,$00
S0038:
	.byte	$53,$79,$6E,$74,$61,$78,$20,$65,$72,$72,$6F,$72,$00
S0036:
	.byte	$27,$3D,$27,$20,$65,$78,$70,$65,$63,$74,$65,$64,$00
S0040:
	.byte	$4D,$45,$5A,$57,$36,$35,$43,$5F,$52,$41,$4D,$00
S003E:
	.byte	$59,$4F,$55,$20,$54,$59,$50,$45,$3A,$20,$00
S0029:
	.byte	$4C,$69,$73,$74,$20,$66,$75,$6C,$6C,$00
S0041:
	.byte	$20,$45,$44,$49,$54,$49,$4F,$4E,$00
S0026:
	.byte	$4F,$76,$65,$72,$66,$6C,$6F,$77,$00
S0003:
	.byte	$52,$45,$54,$55,$52,$4E,$00
S0023:
	.byte	$53,$59,$53,$54,$45,$4D,$00
S000B:
	.byte	$49,$4E,$50,$55,$54,$00
S0002:
	.byte	$47,$4F,$53,$55,$42,$00
S003D:
	.byte	$4C,$49,$4E,$45,$3A,$00
S000C:
	.byte	$50,$52,$49,$4E,$54,$00
S0020:
	.byte	$4C,$49,$53,$54,$00
S001F:
	.byte	$53,$49,$5A,$45,$00
S0007:
	.byte	$4E,$45,$58,$54,$00
S000A:
	.byte	$53,$54,$4F,$50,$00
S0006:
	.byte	$53,$54,$45,$50,$00
S0001:
	.byte	$47,$4F,$54,$4F,$00
S0022:
	.byte	$4E,$45,$57,$00
S0021:
	.byte	$52,$55,$4E,$00
S001E:
	.byte	$41,$42,$53,$00
S001D:
	.byte	$52,$4E,$44,$00
S0004	:=	S002F+14
S0009:
	.byte	$52,$45,$4D,$00
S000D:
	.byte	$4C,$45,$54,$00
S003C:
	.byte	$29,$3A,$00
S003B:
	.byte	$40,$28,$00
S0008:
	.byte	$49,$46,$00
S0016:
	.byte	$3E,$3D,$00
S0005	:=	S0031+12
S001A:
	.byte	$3C,$3D,$00
S0024:
	.byte	$4F,$4B,$00
S0012:
	.byte	$2A,$00
S0011:
	.byte	$2B,$00
S0010:
	.byte	$2D,$00
S000F:
	.byte	$3B,$00
S000E:
	.byte	$2C,$00
S0014	:=	S003B+1
S0015:
	.byte	$29,$00
S0017:
	.byte	$23,$00
S0018:
	.byte	$3E,$00
S0019	:=	S0016+1
S001B:
	.byte	$3C,$00
S001C:
	.byte	$40,$00
S0013:
	.byte	$2F,$00

.segment	"BSS"

_err:
	.res	1,$00
_lbuf:
	.res	160,$00
_ibuf:
	.res	160,$00
_var:
	.res	52,$00
_arr:
	.res	128,$00
_listbuf:
	.res	31160,$00
_clp:
	.res	2,$00
_cip:
	.res	2,$00
_gstk:
	.res	18,$00
_gstki:
	.res	1,$00
_lstk:
	.res	30,$00
_lstki:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ basic (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_basic: near

.segment	"CODE"

	jsr     _inew
	lda     #<(S003F)
	ldx     #>(S003F)
	jsr     _c_puts
	jsr     _newline
	lda     #<(S0040)
	ldx     #>(S0040)
	jsr     _c_puts
	lda     #<(S0041)
	ldx     #>(S0041)
	jsr     _c_puts
	jsr     _newline
	stz     _err
	jsr     _error
	jmp     _warm_start

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldx     #$19
	lda     #$66
	jsr     _srand
	jsr     _basic
	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ newline (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_newline: near

.segment	"CODE"

	lda     #$0D
	jsr     _c_putch
	lda     #$0A
	jmp     _c_putch

.endproc

; ---------------------------------------------------------------
; short __near__ getrnd (short value)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getrnd: near

.segment	"CODE"

	jsr     pushax
	jsr     _rand
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     tosmodax
	ina
	bne     L0001
	inx
L0001:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; short __near__ iexp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_iexp: near

.segment	"CODE"

	jsr     decsp4
	jsr     _iplus
	ldy     #$02
	jsr     staxysp
	lda     _err
	beq     L0003
	ldx     #$FF
	txa
	jmp     incsp4
L0003:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$15
	jeq     L0012
	cmp     #$16
	beq     L000A
	cmp     #$17
	jeq     L0010
	cmp     #$18
	beq     L0008
	cmp     #$19
	beq     L000E
	cmp     #$1A
	beq     L000C
	jmp     L0014
L0008:	inc     _cip
	bne     L0009
	inc     _cip+1
L0009:	jsr     _iplus
	jsr     stax0sp
	ldy     #$03
	jsr     ldaxysp
	cmp     (sp)
	bne     L0015
	txa
	ldy     #$01
	cmp     (sp),y
L0015:	jsr     booleq
	ldy     #$02
	jsr     staxysp
	bra     L0003
L000A:	inc     _cip
	bne     L000B
	inc     _cip+1
L000B:	jsr     _iplus
	jsr     stax0sp
	ldy     #$03
	jsr     ldaxysp
	cmp     (sp)
	bne     L0016
	txa
	ldy     #$01
	cmp     (sp),y
L0016:	jsr     boolne
	ldy     #$02
	jsr     staxysp
	bra     L0003
L000C:	inc     _cip
	bne     L000D
	inc     _cip+1
L000D:	jsr     _iplus
	jsr     stax0sp
	ldy     #$03
	jsr     ldaxysp
	cmp     (sp)
	txa
	ldy     #$01
	sbc     (sp),y
	bvc     L0017
	eor     #$80
L0017:	asl     a
	lda     #$00
	tax
	rol     a
	iny
	jsr     staxysp
	jmp     L0003
L000E:	inc     _cip
	bne     L000F
	inc     _cip+1
L000F:	jsr     _iplus
	jsr     stax0sp
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     tosleax
	ldy     #$02
	jsr     staxysp
	jmp     L0003
L0010:	inc     _cip
	bne     L0011
	inc     _cip+1
L0011:	jsr     _iplus
	jsr     stax0sp
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     tosgtax
	ldy     #$02
	jsr     staxysp
	jmp     L0003
L0012:	inc     _cip
	bne     L0013
	inc     _cip+1
L0013:	jsr     _iplus
	jsr     stax0sp
	ldy     #$03
	jsr     ldaxysp
	cmp     (sp)
	txa
	ldy     #$01
	sbc     (sp),y
	bvs     L0018
	eor     #$80
L0018:	asl     a
	lda     #$00
	tax
	rol     a
	iny
	jsr     staxysp
	jmp     L0003
L0014:	ldy     #$03
	jsr     ldaxysp
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; char __near__ sstyle (unsigned char code, const unsigned char *table, unsigned char count)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sstyle: near

.segment	"CODE"

	jsr     pusha
	bra     L0005
L0002:	ldy     #$03
	lda     (sp),y
	sta     sreg
	dey
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (sp)
	tay
	lda     (ptr1),y
	cmp     sreg
	bne     L0005
	ldx     #$00
	lda     #$01
	jmp     incsp4
L0005:	lda     (sp)
	php
	lda     (sp)
	sec
	sbc     #$01
	sta     (sp)
	plp
	bne     L0002
	ldx     #$00
	txa
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; char __near__ c_toupper (char c)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_c_toupper: near

.segment	"CODE"

	jsr     pusha
	lda     (sp)
	cmp     #$7B
	bcs     L000A
	cmp     #$61
	bcc     L000A
	ldx     #$00
	lda     (sp)
	ldy     #$20
	jsr     decaxy
	bra     L0006
L000A:	lda     (sp)
L0006:	ldx     #$00
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; char __near__ c_isprint (char c)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_c_isprint: near

.segment	"CODE"

	jsr     pusha
	lda     (sp)
	cmp     #$20
	lda     #$00
	tax
	bcc     L0008
	lda     (sp)
	cmp     #$7F
	bcc     L0007
	txa
	jmp     incsp1
L0007:	lda     #$01
L0008:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; char __near__ c_isspace (char c)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_c_isspace: near

.segment	"CODE"

	jsr     pusha
	lda     (sp)
	cmp     #$20
	beq     L000C
	ldx     #$00
	lda     (sp)
	cmp     #$0E
	bcs     L0008
	cmp     #$09
	bcs     L0009
L0008:	txa
	jmp     incsp1
L0009:	lda     #$01
	jmp     incsp1
L000C:	lda     #$01
	ldx     #$00
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; char __near__ c_isdigit (char c)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_c_isdigit: near

.segment	"CODE"

	jsr     pusha
	ldx     #$00
	lda     (sp)
	cmp     #$3A
	bcs     L0005
	cmp     #$30
	bcs     L0006
L0005:	txa
	jmp     incsp1
L0006:	lda     #$01
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; char __near__ c_isalpha (char c)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_c_isalpha: near

.segment	"CODE"

	jsr     pusha
	ldx     #$00
	lda     (sp)
	cmp     #$7B
	bcs     L000F
	cmp     #$61
	bcs     L0011
L000F:	lda     (sp)
	cmp     #$5B
	bcs     L0010
	cmp     #$41
	bcs     L0011
L0010:	txa
	jmp     incsp1
L0011:	lda     #$01
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ c_puts (const char *s)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_c_puts: near

.segment	"CODE"

	jsr     pushax
	bra     L0004
L0002:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	pha
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	pla
	jsr     _c_putch
L0004:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	bne     L0002
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ warm_start (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_warm_start: near

.segment	"CODE"

	jsr     decsp1
L0002:	lda     #$3E
	jsr     _c_putch
	jsr     _c_gets
	jsr     _toktoi
	sta     (sp)
	lda     _err
	beq     L0005
	jsr     _error
	bra     L0002
L0005:	lda     _ibuf
	cmp     #$22
	beq     L0003
	cmp     #$23
	bne     L0007
	lda     (sp)
	sta     _ibuf
	jsr     _inslist
	lda     _err
	beq     L0002
	jsr     _error
	bra     L0002
L0007:	jsr     _icom
	jsr     _error
	bra     L0002
L0003:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ c_gets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_c_gets: near

.segment	"CODE"

	jsr     decsp2
	lda     #$00
	sta     (sp)
	bra     L000D
L0018:	lda     (sp),y
	cmp     #$09
	bne     L001A
	lda     #$20
	sta     (sp),y
L001A:	lda     (sp),y
	cmp     #$08
	beq     L001B
	cmp     #$7F
	bne     L0022
L001B:	lda     (sp)
	beq     L0006
	sec
	sbc     #$01
	sta     (sp)
	lda     #$08
	jsr     _c_putch
	lda     #$20
	jsr     _c_putch
	lda     #$08
	bra     L0017
L0006:	ldy     #$01
L0022:	lda     (sp),y
	jsr     _c_isprint
	tax
	beq     L000D
	lda     (sp)
	cmp     #$9F
	bcs     L000D
	tax
	ldy     #$01
	lda     (sp),y
	sta     _lbuf,x
	clc
	tya
	adc     (sp)
	sta     (sp)
	ldy     #$01
	lda     (sp),y
L0017:	jsr     _c_putch
L000D:	jsr     _c_getch
	ldy     #$01
	sta     (sp),y
	cmp     #$0D
	bne     L0018
	jsr     _newline
	lda     (sp)
	tay
	lda     #$00
	sta     _lbuf,y
	lda     (sp)
	beq     L0013
L0014:	lda     (sp)
	sec
	sbc     #$01
	sta     (sp)
	sta     ptr1
	clc
	lda     #>(_lbuf)
	sta     ptr1+1
	ldy     #<(_lbuf)
	lda     (ptr1),y
	jsr     _c_isspace
	tax
	bne     L0014
	clc
	ina
	adc     (sp)
	sta     (sp)
	clc
	adc     #<(_lbuf)
	sta     ptr1
	txa
	adc     #>(_lbuf)
	sta     ptr1+1
	txa
	sta     (ptr1)
L0013:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ putnum (short value, short d)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_putnum: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp2
	ldy     #$05
	jsr     ldaxysp
	cpx     #$80
	lda     #$00
	bcc     L0010
	ina
	sta     (sp)
	ldy     #$05
	jsr     ldaxysp
	jsr     negax
	ldy     #$04
	jsr     staxysp
	bra     L0003
L0010:	sta     (sp)
L0003:	stz     _lbuf+6
	lda     #$06
	ldy     #$01
	sta     (sp),y
L0004:	ldy     #$01
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	clc
	adc     #<(_lbuf)
	tay
	lda     #$00
	adc     #>(_lbuf)
	tax
	tya
	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	ldy     #$00
	ldx     #$00
	lda     #$0A
	jsr     tosmoda0
	ldy     #$30
	jsr     incaxy
	ldy     #$00
	jsr     staspidx
	ldy     #$07
	jsr     pushwysp
	lda     #$0A
	jsr     tosdiva0
	ldy     #$04
	jsr     staxysp
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0007
	eor     #$80
L0007:	bmi     L0004
	lda     (sp)
	beq     L0012
	ldy     #$01
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	clc
	adc     #<(_lbuf)
	sta     ptr1
	lda     #$00
	adc     #>(_lbuf)
	sta     ptr1+1
	lda     #$2D
	sta     (ptr1)
	bra     L0012
L0011:	lda     #$20
	jsr     _c_putch
	ldx     #$00
	lda     #$01
	ldy     #$02
	jsr     subeqysp
L0012:	lda     #$06
	sec
	ldy     #$01
	sbc     (sp),y
	ldx     #$00
	bcs     L000D
	dex
L000D:	iny
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L000E
	eor     #$80
L000E:	bmi     L0011
	lda     #<(_lbuf)
	ldx     #>(_lbuf)
	ldy     #$01
	clc
	adc     (sp),y
	bcc     L000C
	inx
L000C:	jsr     _c_puts
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; short __near__ getnum (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getnum: near

.segment	"CODE"

	jsr     decsp7
	lda     #$00
	ldy     #$01
	sta     (sp),y
	bra     L000C
L002B:	lda     (sp),y
	cmp     #$08
	beq     L002C
	cmp     #$7F
	bne     L0005
L002C:	ldy     #$01
	lda     (sp),y
	beq     L003D
	sec
	sbc     #$01
	sta     (sp),y
	lda     #$08
	jsr     _c_putch
	lda     #$20
	jsr     _c_putch
	lda     #$08
	bra     L0028
L0005:	ldy     #$01
L003D:	lda     (sp),y
	bne     L003E
	iny
	lda     (sp),y
	cmp     #$2B
	beq     L0039
	cmp     #$2D
	beq     L0039
	dey
L003E:	lda     (sp),y
	cmp     #$06
	bcs     L000C
	iny
	lda     (sp),y
	jsr     _c_isdigit
	tax
	beq     L000C
L0039:	ldy     #$01
	lda     (sp),y
	tax
	iny
	lda     (sp),y
	sta     _lbuf,x
	dey
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	iny
	lda     (sp),y
L0028:	jsr     _c_putch
L000C:	jsr     _c_getch
	ldy     #$02
	sta     (sp),y
	cmp     #$0D
	bne     L002B
	jsr     _newline
	ldy     #$01
	lda     (sp),y
	tay
	lda     #$00
	sta     _lbuf,y
	lda     _lbuf
	cmp     #$2B
	beq     L003A
	cmp     #$2D
	bne     L003B
	lda     #$01
	bra     L0040
L003A:	lda     #$00
	sta     (sp)
	ina
	bra     L003C
L003B:	lda     #$00
L0040:	sta     (sp)
L003C:	ldy     #$01
	sta     (sp),y
	ldx     #$00
	txa
	ldy     #$05
	jsr     staxysp
	ldy     #$03
	bra     L002A
L001E:	ldy     #$06
	jsr     ldaxysp
	jsr     mulax10
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	tay
	lda     _lbuf,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0025
	inx
L0025:	ldy     #$30
	jsr     decaxy
	ldy     #$03
	jsr     staxysp
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	ldy     #$08
	jsr     pushwysp
	ldy     #$06
	jsr     ldaxysp
	jsr     tosicmp
	bmi     L0023
	beq     L0023
	lda     #$02
	sta     _err
L0023:	ldy     #$04
	jsr     ldaxysp
	ldy     #$05
L002A:	jsr     staxysp
	ldy     #$01
	lda     (sp),y
	tay
	lda     _lbuf,y
	bne     L001E
	lda     (sp)
	beq     L0024
	ldy     #$06
	jsr     ldaxysp
	jsr     negax
	jmp     incsp7
L0024:	ldy     #$06
	jsr     ldaxysp
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ toktoi (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_toktoi: near

.segment	"CODE"

	jsr     decsp1
	lda     #$00
	jsr     pusha
	jsr     push0
	jsr     decsp2
	lda     #<(_lbuf)
	ldx     #>(_lbuf)
	jsr     pushax
	jsr     decsp5
	jmp     L004A
L0005:	ldy     #$05
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L0007:	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _c_isspace
	tax
	bne     L0005
	ldy     #$0C
L0052:	sta     (sp),y
	cmp     #$23
	jcs     L0059
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0055
	inx
	clc
L0055:	adc     #<(_kwtbl)
	tay
	txa
	adc     #>(_kwtbl)
	tax
	tya
	jsr     ldaxi
	ldy     #$09
	jsr     staxysp
	ldy     #$06
	jsr     ldaxysp
	ldy     #$07
	jsr     staxysp
	bra     L000E
L000C:	ldy     #$09
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$07
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L000E:	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	beq     L0050
	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     pusha0
	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _c_toupper
	jsr     tosicmp
	beq     L000C
L0050:	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	bne     L000A
	ldy     #$0B
	lda     (sp),y
	cmp     #$9F
	bcc     L0013
	lda     #$04
	sta     _err
	ldx     #$00
	txa
	jmp     L0001
L0013:	lda     (sp),y
	tax
	iny
	lda     (sp),y
	sta     _ibuf,x
	dey
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	ldy     #$08
	jsr     ldaxysp
	ldy     #$05
	jsr     staxysp
	bra     L0009
L000A:	ldy     #$0C
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0052
L0009:	ldy     #$0C
L0059:	lda     (sp),y
	cmp     #$08
	jne     L0015
	bra     L0018
L0016:	ldy     #$05
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L0018:	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _c_isspace
	tax
	bne     L0016
	ldy     #$06
	jsr     ldaxysp
	ldy     #$07
	jsr     staxysp
	lda     #$00
	ldy     #$0C
L0053:	sta     (sp),y
	ldy     #$08
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	php
	ldy     #$07
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	plp
	beq     L001A
	ldy     #$0C
	clc
	lda     #$01
	adc     (sp),y
	bra     L0053
L001A:	ldy     #$0B
	lda     (sp),y
	jsr     pusha0
	lda     #$9E
	sec
	ldy     #$0E
	sbc     (sp),y
	bcs     L004D
	dex
L004D:	jsr     tosicmp
	bmi     L001D
	lda     #$04
	sta     _err
	ldx     #$00
	txa
	jmp     L0001
L001D:	ldy     #$0B
	lda     (sp),y
	tax
	iny
	lda     (sp),y
	sta     _ibuf,x
	dey
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	bra     L0021
L001F:	lda     #<(_ibuf)
	ldx     #>(_ibuf)
	dey
	clc
	adc     (sp),y
	bcc     L0022
	inx
L0022:	sta     sreg
	stx     sreg+1
	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     (sreg)
	ldy     #$0B
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	ldy     #$05
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L0021:	ldy     #$0C
	lda     (sp),y
	php
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	plp
	bne     L001F
	jmp     L0003
L0015:	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jeq     L004A
	ldy     #$06
	jsr     ldaxysp
	ldy     #$07
	jsr     staxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _c_isdigit
	tax
	jeq     L0024
	ldx     #$00
	txa
	ldy     #$02
	jsr     staxysp
	jsr     stax0sp
L0025:	ldy     #$03
	jsr     ldaxysp
	jsr     mulax10
	sta     sreg
	stx     sreg+1
	ldy     #$08
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	clc
	adc     sreg
	ldx     sreg+1
	bcc     L004E
	inx
L004E:	ldy     #$30
	jsr     decaxy
	jsr     stax0sp
	ldy     #$07
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     tosicmp
	bmi     L0028
	beq     L0028
	lda     #$02
	sta     _err
	ldx     #$00
	txa
	jmp     L0001
L0028:	jsr     ldax0sp
	ldy     #$02
	jsr     staxysp
	ldy     #$08
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _c_isdigit
	tax
	bne     L0025
	ldy     #$0B
	lda     (sp),y
	cmp     #$9D
	bcc     L0029
	lda     #$04
	sta     _err
	txa
	jmp     L0001
L0029:	lda     (sp),y
	tay
	lda     #$23
	sta     _ibuf,y
	ldy     #$0B
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	lda     #<(_ibuf)
	ldx     #>(_ibuf)
	clc
	adc     (sp),y
	bcc     L002B
	inx
L002B:	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (sp),y
	sta     (ptr1)
	ldy     #$0B
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	lda     #<(_ibuf)
	ldx     #>(_ibuf)
	clc
	adc     (sp),y
	bcc     L002C
	inx
L002C:	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	sta     (ptr1)
	ldy     #$0B
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	ldy     #$08
	jsr     ldaxysp
	ldy     #$05
	jsr     staxysp
	jmp     L004A
L0024:	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$22
	beq     L005B
	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$27
	jne     L002F
L005B:	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	ldy     #$04
	sta     (sp),y
	iny
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$06
	jsr     ldaxysp
	ldy     #$07
	jsr     staxysp
	lda     #$00
	ldy     #$0C
L0054:	sta     (sp),y
	ldy     #$08
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	ldy     #$04
	cmp     (sp),y
	beq     L0033
	ldy     #$08
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _c_isprint
	tax
	beq     L0033
	ldy     #$07
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$0C
	clc
	lda     #$01
	adc     (sp),y
	bra     L0054
L0033:	ldy     #$0B
	lda     (sp),y
	jsr     pusha0
	lda     #$9F
	sec
	ldy     #$0E
	sbc     (sp),y
	bcs     L004F
	dex
L004F:	jsr     tosicmp
	bmi     L0039
	lda     #$04
	sta     _err
	ldx     #$00
	txa
	jmp     L0001
L0039:	ldy     #$0B
	lda     (sp),y
	tay
	lda     #$25
	sta     _ibuf,y
	ldy     #$0B
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	tax
	iny
	lda     (sp),y
	sta     _ibuf,x
	dey
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	bra     L003E
L003C:	lda     #<(_ibuf)
	ldx     #>(_ibuf)
	dey
	clc
	adc     (sp),y
	bcc     L003F
	inx
L003F:	sta     sreg
	stx     sreg+1
	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     (sreg)
	ldy     #$0B
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	ldy     #$05
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L003E:	ldy     #$0C
	lda     (sp),y
	php
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	plp
	bne     L003C
	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	ldy     #$04
	cmp     (sp),y
	jne     L004A
	iny
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L004A
L002F:	ldy     #$08
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _c_isalpha
	tax
	jeq     L0062
	ldy     #$0B
	lda     (sp),y
	cmp     #$9E
	bcc     L005E
	lda     #$04
	sta     _err
	ldx     #$00
	txa
	jmp     L0001
L005E:	lda     (sp),y
	cmp     #$04
	bcc     L0063
	ldx     #$00
	lda     (sp),y
	jsr     decax2
	sta     ptr1
	txa
	clc
	adc     #>(_ibuf)
	sta     ptr1+1
	ldy     #<(_ibuf)
	lda     (ptr1),y
	cmp     #$24
	bne     L0044
	ldy     #$0B
	ldx     #$00
	lda     (sp),y
	jsr     decax4
	sta     ptr1
	txa
	clc
	adc     #>(_ibuf)
	sta     ptr1+1
	ldy     #<(_ibuf)
	lda     (ptr1),y
	cmp     #$24
	bne     L0044
	lda     #$14
	sta     _err
	ldx     #$00
	txa
	bra     L0001
L0044:	ldy     #$0B
L0063:	lda     (sp),y
	tay
	lda     #$24
	sta     _ibuf,y
	ldy     #$0B
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	lda     #<(_ibuf)
	ldx     #>(_ibuf)
	clc
	adc     (sp),y
	bcc     L0049
	inx
L0049:	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	pha
	ldy     #$0D
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	pla
	jsr     _c_toupper
	ldy     #$41
	jsr     decaxy
	ldy     #$00
	jsr     staspidx
	ldy     #$05
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L004A
L0062:	lda     #$14
	sta     _err
	txa
	bra     L0001
L004A:	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jne     L0007
L0003:	ldy     #$0B
	lda     (sp),y
	tay
	lda     #$26
	sta     _ibuf,y
	ldy     #$0B
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
L0001:	ldy     #$0D
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; short __near__ getlineno (unsigned char *lp)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getlineno: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	bne     L0002
	ldx     #$7F
	dea
	jmp     incsp2
L0002:	jsr     ldax0sp
	ina
	bne     L0003
	inx
L0003:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     sreg
	jsr     ldax0sp
	jsr     incax2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	tax
	lda     sreg
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char *__near__ getlp (short lineno)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getlp: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp2
	lda     #<(_listbuf)
	ldx     #>(_listbuf)
	jsr     stax0sp
L0002:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	beq     L0003
	jsr     ldax0sp
	jsr     _getlineno
	ldy     #$02
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvs     L0007
	eor     #$80
L0007:	bmi     L0003
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1)
	jsr     addeq0sp
	bra     L0002
L0003:	jsr     ldax0sp
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; short __near__ getsize (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getsize: near

.segment	"CODE"

	jsr     decsp2
	lda     #<(_listbuf)
	ldx     #>(_listbuf)
	jsr     stax0sp
L0002:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	beq     L0003
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1)
	jsr     addeq0sp
	bra     L0002
L0003:	lda     #<(_listbuf+31160)
	sec
	sbc     (sp)
	pha
	lda     #>(_listbuf+31160)
	ldy     #$01
	sbc     (sp),y
	tax
	pla
	jsr     decax1
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ inslist (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inslist: near

.segment	"CODE"

	jsr     decsp8
	jsr     _getsize
	cmp     _ibuf
	txa
	sbc     #$00
	bvc     L0018
	eor     #$80
L0018:	bpl     L0002
	lda     #$05
	sta     _err
	jmp     incsp8
L0002:	lda     #<(_ibuf)
	ldx     #>(_ibuf)
	jsr     _getlineno
	jsr     _getlp
	ldy     #$06
	jsr     staxysp
	jsr     _getlineno
	jsr     pushax
	lda     #<(_ibuf)
	ldx     #>(_ibuf)
	jsr     _getlineno
	jsr     tosicmp
	bne     L0003
	ldy     #$07
	jsr     ldaxysp
	ldy     #$04
	jsr     staxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	clc
	ldy     #$06
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	ldy     #$02
	jsr     staxysp
	bra     L0009
L0008:	ldy     #$05
	jsr     ldaxysp
	sta     sreg
	stx     sreg+1
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     (sreg)
	ldy     #$04
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L000A:	ldy     #$01
	lda     (sp),y
	ora     (sp)
	php
	ldx     #$00
	tya
	jsr     subeq0sp
	plp
	bne     L0008
L0009:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1)
	jsr     stax0sp
	cmp     #$00
	bne     L000A
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
L0003:	lda     _ibuf
	cmp     #$04
	jeq     L0015
	ldy     #$07
	jsr     ldaxysp
	ldy     #$04
	jsr     staxysp
L000C:	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	beq     L000D
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1)
	ldy     #$04
	jsr     addeqysp
	bra     L000C
L000D:	ldy     #$05
	jsr     ldaxysp
	sec
	ldy     #$06
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	ina
	bne     L0010
	inx
L0010:	jsr     stax0sp
	ldy     #$05
	jsr     ldaxysp
	clc
	adc     _ibuf
	bcc     L0017
	inx
L0017:	ldy     #$02
	jsr     staxysp
	bra     L0013
L0011:	ldy     #$03
	jsr     ldaxysp
	sta     sreg
	stx     sreg+1
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     (sreg)
	ldx     #$00
	lda     #$01
	ldy     #$02
	jsr     subeqysp
	ldx     #$00
	lda     #$01
	ldy     #$04
	jsr     subeqysp
L0013:	ldy     #$01
	lda     (sp),y
	ora     (sp)
	php
	ldx     #$00
	tya
	jsr     subeq0sp
	plp
	bne     L0011
	ldx     #$00
	lda     _ibuf
	jsr     stax0sp
	ldy     #$07
	jsr     ldaxysp
	ldy     #$04
	jsr     staxysp
	lda     #<(_ibuf)
	ldx     #>(_ibuf)
	ldy     #$02
	jsr     staxysp
	bra     L0016
L0014:	ldy     #$05
	jsr     ldaxysp
	sta     sreg
	stx     sreg+1
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     (sreg)
	ldy     #$04
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L0016:	ldy     #$01
	lda     (sp),y
	ora     (sp)
	php
	ldx     #$00
	tya
	jsr     subeq0sp
	plp
	bne     L0014
L0015:	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ putlist (unsigned char *ip)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_putlist: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp1
	jmp     L001D
L0002:	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$23
	jcs     L0005
	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1)
	asl     a
	bcc     L0020
	inx
	clc
L0020:	adc     #<(_kwtbl)
	tay
	txa
	adc     #>(_kwtbl)
	tax
	tya
	jsr     ldaxi
	jsr     _c_puts
	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     pusha
	lda     #<(_i_nsa)
	ldx     #>(_i_nsa)
	jsr     pushax
	lda     #$13
	jsr     _sstyle
	tax
	bne     L0006
	lda     #$20
	jsr     _c_putch
L0006:	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$08
	bne     L0007
	ldy     #$01
	ldx     #$00
	tya
	jsr     addeqysp
	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     (sp)
	ldy     #$01
	ldx     #$00
	tya
	jsr     addeqysp
	bra     L000A
L0008:	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	pha
	ldy     #$01
	ldx     #$00
	tya
	jsr     addeqysp
	pla
	jsr     _c_putch
L000A:	lda     (sp)
	php
	lda     (sp)
	sec
	sbc     #$01
	sta     (sp)
	plp
	bne     L0008
	jmp     incsp3
L0007:	ldy     #$01
	ldx     #$00
	tya
	jsr     addeqysp
	jmp     L001D
L0005:	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$23
	bne     L000C
	ldy     #$01
	ldx     #$00
	tya
	jsr     addeqysp
	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     sreg
	ldy     #$02
	jsr     ldaxysp
	ina
	bne     L000D
	inx
L000D:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	tax
	lda     sreg
	jsr     pushax
	ldx     #$00
	txa
	jsr     _putnum
	ldy     #$01
	ldx     #$00
	lda     #$02
	jsr     addeqysp
	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     pusha
	lda     #<(_i_nsb)
	ldx     #>(_i_nsb)
	jsr     pushax
	lda     #$0F
	jsr     _sstyle
	tax
	jne     L001D
	lda     #$20
	jsr     _c_putch
	jmp     L001D
L000C:	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$24
	bne     L0010
	ldy     #$01
	ldx     #$00
	tya
	jsr     addeqysp
	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1)
	ldy     #$41
	jsr     incaxy
	pha
	ldy     #$01
	ldx     #$00
	tya
	jsr     addeqysp
	pla
	jsr     _c_putch
	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     pusha
	lda     #<(_i_nsb)
	ldx     #>(_i_nsb)
	jsr     pushax
	lda     #$0F
	jsr     _sstyle
	tax
	jne     L001D
	lda     #$20
	jsr     _c_putch
	jmp     L001D
L0010:	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$25
	jne     L0023
	jsr     decsp1
	lda     #$22
	sta     (sp)
	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	ldy     #$01
L001F:	sta     (sp),y
	lda     (sp),y
	beq     L0022
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	tay
	lda     (ptr1),y
	cmp     #$22
	bne     L0016
	lda     #$27
	sta     (sp)
	bra     L0022
L0016:	ldy     #$01
	lda     (sp),y
	sec
	sbc     #$01
	bra     L001F
L0022:	lda     (sp)
	jsr     _c_putch
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	ldy     #$01
	sta     (sp),y
	iny
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L001B
L0019:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	pha
	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	pla
	jsr     _c_putch
L001B:	ldy     #$01
	lda     (sp),y
	php
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	plp
	bne     L0019
	lda     (sp)
	jsr     _c_putch
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$24
	bne     L001C
	lda     #$20
	jsr     _c_putch
L001C:	jsr     incsp1
	bra     L001D
L0023:	lda     #$15
	sta     _err
	jmp     incsp3
L001D:	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$26
	jne     L0002
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; short __near__ getparam (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getparam: near

.segment	"CODE"

	jsr     decsp2
	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$13
	beq     L0002
	lda     #$11
	sta     _err
	ldx     #$00
	txa
	jmp     incsp2
L0002:	inc     _cip
	bne     L0003
	inc     _cip+1
L0003:	jsr     _iexp
	jsr     stax0sp
	lda     _err
	beq     L0004
	ldx     #$00
	txa
	jmp     incsp2
L0004:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$14
	beq     L0005
	lda     #$11
	sta     _err
	ldx     #$00
	txa
	jmp     incsp2
L0005:	inc     _cip
	bne     L0006
	inc     _cip+1
L0006:	jsr     ldax0sp
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; short __near__ ivalue (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ivalue: near

.segment	"CODE"

	jsr     decsp2
	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	ldx     #$00
	lda     (ptr1)
	cmp     #$0F
	jeq     L000A
	cmp     #$10
	beq     L0008
	cmp     #$13
	jeq     L000F
	cmp     #$1B
	jeq     L0010
	cmp     #$1C
	jeq     L0015
	cmp     #$1D
	jeq     L0018
	cmp     #$1E
	jeq     L001C
	cmp     #$23
	beq     L0004
	cmp     #$24
	beq     L000C
	jmp     L0029
L0004:	inc     _cip
	bne     L0005
	inc     _cip+1
L0005:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	sta     sreg
	lda     _cip
	ldx     _cip+1
	ina
	bne     L0006
	inx
L0006:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	tax
	lda     sreg
	jsr     stax0sp
	lda     #$02
	clc
	adc     _cip
	sta     _cip
	jcc     L0003
	inc     _cip+1
	jmp     L0003
L0008:	inc     _cip
	bne     L0009
	inc     _cip+1
L0009:	jsr     _ivalue
	jsr     stax0sp
	jmp     L0003
L000A:	inc     _cip
	bne     L0027
	inc     _cip+1
L0027:	jsr     push0
	jsr     _ivalue
	jsr     tossubax
	jsr     stax0sp
	jmp     L0003
L000C:	inc     _cip
	bne     L000D
	inc     _cip+1
L000D:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	asl     a
	bcc     L0026
	inx
	clc
L0026:	adc     #<(_var)
	tay
	txa
	adc     #>(_var)
	tax
	tya
	jsr     ldaxi
	jsr     stax0sp
	inc     _cip
	jne     L0003
	inc     _cip+1
	jmp     L0003
L000F:	jsr     _getparam
	jsr     stax0sp
	jmp     L0003
L0010:	inc     _cip
	bne     L0011
	inc     _cip+1
L0011:	jsr     _getparam
	jsr     stax0sp
	lda     _err
	jne     L0003
	jsr     ldax0sp
	cmp     #$40
	txa
	sbc     #$00
	bvs     L0014
	eor     #$80
L0014:	bpl     L0013
	lda     #$03
	jmp     L0025
L0013:	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     #<(_arr)
	tay
	txa
	adc     #>(_arr)
	tax
	tya
	jsr     ldaxi
	jsr     stax0sp
	jmp     L0003
L0015:	inc     _cip
	bne     L0016
	inc     _cip+1
L0016:	jsr     _getparam
	jsr     stax0sp
	lda     _err
	bne     L0003
	jsr     ldax0sp
	jsr     _getrnd
	jsr     stax0sp
	bra     L0003
L0018:	inc     _cip
	bne     L0019
	inc     _cip+1
L0019:	jsr     _getparam
	jsr     stax0sp
	lda     _err
	bne     L0003
	jsr     ldax0sp
	cpx     #$80
	bcc     L0003
	jsr     ldax0sp
	jsr     negax
	jsr     stax0sp
	bra     L0003
L001C:	inc     _cip
	bne     L001D
	inc     _cip+1
L001D:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$13
	bne     L0028
	lda     _cip
	ldx     _cip+1
	ina
	bne     L0020
	inx
L0020:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$14
	beq     L001E
L0028:	lda     #$11
	bra     L0025
L001E:	lda     #$02
	clc
	adc     _cip
	sta     _cip
	bcc     L0022
	inc     _cip+1
L0022:	jsr     _getsize
	jsr     stax0sp
	bra     L0003
L0029:	lda     #$14
L0025:	sta     _err
L0003:	jsr     ldax0sp
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; short __near__ imul (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_imul: near

.segment	"CODE"

	jsr     decsp4
	jsr     _ivalue
	ldy     #$02
	jsr     staxysp
	lda     _err
	beq     L0003
	ldx     #$FF
	txa
	jmp     incsp4
L0003:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$11
	beq     L0008
	cmp     #$12
	beq     L000A
	bra     L000E
L0008:	inc     _cip
	bne     L0009
	inc     _cip+1
L0009:	jsr     _ivalue
	jsr     stax0sp
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     tosmulax
	ldy     #$02
	jsr     staxysp
	bra     L0003
L000A:	inc     _cip
	bne     L000B
	inc     _cip+1
L000B:	jsr     _ivalue
	jsr     stax0sp
	cpx     #$00
	bne     L000C
	cmp     #$00
	bne     L000C
	ina
	sta     _err
	dex
	txa
	jmp     incsp4
L000C:	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     tosdivax
	ldy     #$02
	jsr     staxysp
	bra     L0003
L000E:	ldy     #$03
	jsr     ldaxysp
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; short __near__ iplus (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_iplus: near

.segment	"CODE"

	jsr     decsp4
	jsr     _imul
	ldy     #$02
	jsr     staxysp
	lda     _err
	beq     L0003
	ldx     #$FF
	txa
	jmp     incsp4
L0003:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$0F
	beq     L000A
	cmp     #$10
	bne     L000C
	inc     _cip
	bne     L0009
	inc     _cip+1
L0009:	jsr     _imul
	jsr     stax0sp
	ldy     #$02
	jsr     addeqysp
	bra     L0003
L000A:	inc     _cip
	bne     L000B
	inc     _cip+1
L000B:	jsr     _imul
	jsr     stax0sp
	ldy     #$02
	jsr     subeqysp
	bra     L0003
L000C:	ldy     #$03
	jsr     ldaxysp
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ iprint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_iprint: near

.segment	"CODE"

	jsr     decsp5
	ldx     #$00
	txa
	ldy     #$01
	jsr     staxysp
	jmp     L001C
L0002:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$16
	beq     L0011
	cmp     #$25
	bne     L0014
	inc     _cip
	bne     L000B
	inc     _cip+1
L000B:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	sta     (sp)
	inc     _cip
	bne     L0021
	inc     _cip+1
	bra     L0021
L000D:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	inc     _cip
	bne     L0010
	inc     _cip+1
L0010:	jsr     _c_putch
L0021:	lda     (sp)
	php
	lda     (sp)
	sec
	sbc     #$01
	sta     (sp)
	plp
	bne     L000D
	bra     L0009
L0011:	inc     _cip
	bne     L0012
	inc     _cip+1
L0012:	jsr     _iexp
	ldy     #$01
	jsr     staxysp
	lda     _err
	beq     L0009
	jmp     incsp5
L0014:	jsr     _iexp
	ldy     #$03
	jsr     staxysp
	lda     _err
	jne     L0001
	ldy     #$06
	jsr     pushwysp
	ldy     #$04
	jsr     ldaxysp
	jsr     _putnum
L0009:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$0D
	bne     L0016
	inc     _cip
	bne     L0017
	inc     _cip+1
L0017:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$0E
	beq     L0001
	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$26
	beq     L0001
	bra     L001C
L0016:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$0E
	beq     L001C
	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$26
	beq     L001C
	lda     #$14
	sta     _err
	jmp     incsp5
L001C:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$0E
	beq     L0020
	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$26
	jne     L0002
L0020:	jsr     _newline
L0001:	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ iinput (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_iinput: near

.segment	"CODE"

	jsr     decsp6
L0024:	lda     #$01
	sta     (sp)
	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$25
	bne     L0005
	inc     _cip
	bne     L0006
	inc     _cip+1
L0006:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	ldy     #$01
	sta     (sp),y
	inc     _cip
	bne     L0025
	inc     _cip+1
	bra     L0025
L0008:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	inc     _cip
	bne     L000B
	inc     _cip+1
L000B:	jsr     _c_putch
	ldy     #$01
L0025:	lda     (sp),y
	php
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	plp
	bne     L0008
	lda     #$00
	sta     (sp)
L0005:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$1B
	beq     L0013
	cmp     #$24
	jne     L0028
	inc     _cip
	bne     L0026
	inc     _cip+1
L0026:	lda     (sp)
	beq     L0010
	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	ldx     #$00
	lda     (ptr1)
	ldy     #$41
	jsr     incaxy
	jsr     _c_putch
	lda     #$3A
	jsr     _c_putch
L0010:	jsr     _getnum
	ldy     #$04
	jsr     staxysp
	lda     _err
	jne     L0003
	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	ldx     #$00
	lda     (ptr1)
	asl     a
	bcc     L0023
	inx
	clc
L0023:	adc     #<(_var)
	sta     ptr1
	txa
	adc     #>(_var)
	sta     ptr1+1
	ldy     #$05
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	inc     _cip
	bne     L000D
	inc     _cip+1
	bra     L000D
L0013:	inc     _cip
	bne     L0014
	inc     _cip+1
L0014:	jsr     _getparam
	ldy     #$02
	jsr     staxysp
	lda     _err
	jne     L0003
	ldy     #$03
	jsr     ldaxysp
	cmp     #$40
	txa
	sbc     #$00
	bvs     L0017
	eor     #$80
L0017:	bpl     L0016
	lda     #$03
	bra     L0029
L0016:	lda     (sp)
	beq     L0018
	lda     #<(S003B)
	ldx     #>(S003B)
	jsr     _c_puts
	ldy     #$05
	jsr     pushwysp
	ldx     #$00
	txa
	jsr     _putnum
	lda     #<(S003C)
	ldx     #>(S003C)
	jsr     _c_puts
L0018:	jsr     _getnum
	ldy     #$04
	jsr     staxysp
	lda     _err
	bne     L0003
	ldy     #$03
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_arr)
	sta     ptr1
	txa
	adc     #>(_arr)
	sta     ptr1+1
	ldy     #$05
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
L000D:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$0D
	beq     L001D
	cmp     #$0E
	beq     L0003
	cmp     #$26
	beq     L0003
	bra     L0028
L001D:	inc     _cip
	jne     L0024
	inc     _cip+1
	jmp     L0024
L0028:	lda     #$14
L0029:	sta     _err
L0003:	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ ivar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ivar: near

.segment	"CODE"

	jsr     decsp4
	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	ldx     #$00
	lda     (ptr1)
	jsr     stax0sp
	inc     _cip
	bne     L0002
	inc     _cip+1
L0002:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$18
	beq     L0003
	lda     #$12
	sta     _err
	jmp     incsp4
L0003:	inc     _cip
	bne     L0004
	inc     _cip+1
L0004:	jsr     _iexp
	ldy     #$02
	jsr     staxysp
	lda     _err
	bne     L0001
	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     #<(_var)
	sta     ptr1
	txa
	adc     #>(_var)
	sta     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
L0001:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ iarray (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_iarray: near

.segment	"CODE"

	jsr     decsp4
	jsr     _getparam
	jsr     stax0sp
	lda     _err
	bne     L0001
	jsr     ldax0sp
	cmp     #$40
	txa
	sbc     #$00
	bvs     L0004
	eor     #$80
L0004:	bpl     L0003
	lda     #$03
	sta     _err
	jmp     incsp4
L0003:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$18
	beq     L0005
	lda     #$12
	sta     _err
	jmp     incsp4
L0005:	inc     _cip
	bne     L0006
	inc     _cip+1
L0006:	jsr     _iexp
	ldy     #$02
	jsr     staxysp
	lda     _err
	bne     L0001
	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     #<(_arr)
	sta     ptr1
	txa
	adc     #>(_arr)
	sta     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
L0001:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ ilet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ilet: near

.segment	"CODE"

	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$1B
	beq     L0006
	cmp     #$24
	bne     L0009
	inc     _cip
	bne     L0005
	inc     _cip+1
L0005:	jmp     _ivar
L0006:	inc     _cip
	bne     L0007
	inc     _cip+1
L0007:	jmp     _iarray
L0009:	lda     #$0E
	sta     _err
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char *__near__ iexe (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_iexe: near

.segment	"CODE"

	ldy     #$0C
	jsr     subysp
	jmp     L0058
L0002:	jsr     _c_kbhit
	tax
	beq     L0006
	jsr     _c_getch
	cmp     #$1B
	bne     L0006
	lda     #$16
	sta     _err
	ldx     #$00
	txa
	jmp     L0001
L0006:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	ldx     #$00
	lda     (ptr1)
	beq     L0009
	cmp     #$01
	jeq     L000D
	cmp     #$02
	jeq     L007A
	cmp     #$03
	jeq     L0014
	cmp     #$06
	jeq     L002A
	cmp     #$07
	jeq     L003B
	cmp     #$08
	jeq     L0043
	cmp     #$09
	jeq     L0047
	cmp     #$0A
	jeq     L0050
	cmp     #$0B
	jeq     L004E
	cmp     #$0C
	jeq     L004C
	cmp     #$0E
	jeq     L0052
	cmp     #$1B
	jeq     L004A
	cmp     #$1F
	jeq     L0098
	cmp     #$20
	jeq     L0098
	cmp     #$21
	jeq     L0098
	cmp     #$24
	jeq     L0048
	jmp     L0099
L0009:	inc     _cip
	bne     L000A
	inc     _cip+1
L000A:	jsr     _iexp
	ldy     #$0A
	jsr     staxysp
	lda     _err
	jne     L0008
	ldy     #$0B
	jsr     ldaxysp
	jsr     _getlp
	ldy     #$08
	jsr     staxysp
	ldy     #$0D
	jsr     pushwysp
	ldy     #$0B
	jsr     ldaxysp
	jsr     _getlineno
	jsr     tosicmp
	beq     L000C
	lda     #$10
	jmp     L006C
L000C:	ldy     #$09
	jsr     ldaxysp
	sta     _clp
	stx     _clp+1
	jsr     incax3
	sta     _cip
	stx     _cip+1
	jmp     L0008
L000D:	inc     _cip
	bne     L000E
	inc     _cip+1
L000E:	jsr     _iexp
	ldy     #$0A
	jsr     staxysp
	lda     _err
	jne     L0008
	ldy     #$0B
	jsr     ldaxysp
	jsr     _getlp
	ldy     #$08
	jsr     staxysp
	ldy     #$0D
	jsr     pushwysp
	ldy     #$0B
	jsr     ldaxysp
	jsr     _getlineno
	jsr     tosicmp
	beq     L0010
	lda     #$10
	jmp     L006C
L0010:	lda     _gstki
	cmp     #$06
	ldx     #$00
	bcc     L0079
	lda     #$06
	jmp     L006C
L0079:	lda     _gstki
	inc     _gstki
	asl     a
	bcc     L006E
	inx
	clc
L006E:	adc     #<(_gstk)
	sta     ptr1
	txa
	adc     #>(_gstk)
	sta     ptr1+1
	lda     _clp
	sta     (ptr1)
	ldy     #$01
	lda     _clp+1
	sta     (ptr1),y
	ldx     #$00
	lda     _gstki
	inc     _gstki
	asl     a
	bcc     L006F
	inx
	clc
L006F:	adc     #<(_gstk)
	sta     ptr1
	txa
	adc     #>(_gstk)
	sta     ptr1+1
	lda     _cip
	sta     (ptr1)
	ldy     #$01
	lda     _cip+1
	sta     (ptr1),y
	ldx     #$00
	lda     _gstki
	inc     _gstki
	asl     a
	bcc     L0070
	inx
	clc
L0070:	adc     #<(_gstk)
	sta     ptr1
	txa
	adc     #>(_gstk)
	sta     ptr1+1
	lda     _lstki
	sta     (ptr1)
	ldy     #$01
	lda     #$00
	sta     (ptr1),y
	ldy     #$09
	jsr     ldaxysp
	sta     _clp
	stx     _clp+1
	jsr     incax3
	sta     _cip
	stx     _cip+1
	jmp     L0008
L007A:	lda     _gstki
	cmp     #$03
	bcs     L007B
	lda     #$07
	jmp     L006C
L007B:	dec     _gstki
	lda     _gstki
	asl     a
	bcc     L0071
	inx
	clc
L0071:	adc     #<(_gstk)
	tay
	txa
	adc     #>(_gstk)
	tax
	tya
	jsr     ldaxi
	sta     _lstki
	ldx     #$00
	dec     _gstki
	lda     _gstki
	asl     a
	bcc     L0072
	inx
	clc
L0072:	adc     #<(_gstk)
	tay
	txa
	adc     #>(_gstk)
	tax
	tya
	jsr     ldaxi
	sta     _cip
	stx     _cip+1
	ldx     #$00
	dec     _gstki
	lda     _gstki
	asl     a
	bcc     L0073
	inx
	clc
L0073:	adc     #<(_gstk)
	tay
	txa
	adc     #>(_gstk)
	tax
	tya
	jsr     ldaxi
	sta     _clp
	stx     _clp+1
	jmp     L0008
L0014:	inc     _cip
	bne     L0015
	inc     _cip+1
L0015:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$24
	jsr     boolne
	php
	inc     _cip
	bne     L0017
	inc     _cip+1
L0017:	plp
	beq     L0016
	lda     #$0C
	jmp     L006C
L0016:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	ldy     #$06
	jsr     staxysp
	jsr     _ivar
	lda     _err
	jne     L0008
	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$04
	bne     L007C
	inc     _cip
	bne     L001A
	inc     _cip+1
L001A:	jsr     _iexp
	ldy     #$04
	jsr     staxysp
	bra     L001B
L007C:	lda     #$0D
	jmp     L006C
L001B:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	ldx     #$00
	lda     (ptr1)
	cmp     #$05
	bne     L007D
	inc     _cip
	bne     L001D
	inc     _cip+1
L001D:	jsr     _iexp
	bra     L009A
L007D:	lda     #$01
L009A:	ldy     #$02
	jsr     staxysp
	cpx     #$80
	bcc     L0068
	lda     #$01
	sec
	ldy     #$02
	sbc     (sp),y
	pha
	lda     #$80
	iny
	sbc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	jsr     tosicmp
	beq     L0068
	bpl     L0087
L0068:	ldy     #$03
	jsr     ldaxysp
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0024
	eor     #$80
L0024:	bpl     L0088
	lda     #$FF
	sec
	ldy     #$02
	sbc     (sp),y
	pha
	lda     #$7F
	iny
	sbc     (sp),y
	tax
	pla
	iny
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L0064
	eor     #$80
L0064:	bpl     L0088
L0087:	lda     #$02
	jmp     L006C
L0088:	lda     _lstki
	cmp     #$0A
	ldx     #$00
	bcc     L0089
	lda     #$08
	jmp     L006C
L0089:	lda     _lstki
	inc     _lstki
	asl     a
	bcc     L0074
	inx
	clc
L0074:	adc     #<(_lstk)
	sta     ptr1
	txa
	adc     #>(_lstk)
	sta     ptr1+1
	lda     _clp
	sta     (ptr1)
	ldy     #$01
	lda     _clp+1
	sta     (ptr1),y
	ldx     #$00
	lda     _lstki
	inc     _lstki
	asl     a
	bcc     L0075
	inx
	clc
L0075:	adc     #<(_lstk)
	sta     ptr1
	txa
	adc     #>(_lstk)
	sta     ptr1+1
	lda     _cip
	sta     (ptr1)
	ldy     #$01
	lda     _cip+1
	sta     (ptr1),y
	ldx     #$00
	lda     _lstki
	inc     _lstki
	asl     a
	bcc     L0076
	inx
	clc
L0076:	adc     #<(_lstk)
	sta     ptr1
	txa
	adc     #>(_lstk)
	sta     ptr1+1
	ldy     #$05
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	ldx     #$00
	lda     _lstki
	inc     _lstki
	asl     a
	bcc     L0077
	inx
	clc
L0077:	adc     #<(_lstk)
	sta     ptr1
	txa
	adc     #>(_lstk)
	sta     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	ldx     #$00
	lda     _lstki
	inc     _lstki
	asl     a
	bcc     L0078
	inx
	clc
L0078:	adc     #<(_lstk)
	sta     ptr1
	txa
	adc     #>(_lstk)
	sta     ptr1+1
	ldy     #$07
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	jmp     L0008
L002A:	inc     _cip
	bne     L008A
	inc     _cip+1
L008A:	lda     _lstki
	cmp     #$05
	bcs     L008B
	lda     #$09
	jmp     L006C
L008B:	lda     _lstki
	jsr     decax1
	jsr     aslax1
	clc
	adc     #<(_lstk)
	tay
	txa
	adc     #>(_lstk)
	tax
	tya
	jsr     ldaxi
	ldy     #$06
	jsr     staxysp
	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$24
	jsr     boolne
	php
	inc     _cip
	bne     L002E
	inc     _cip+1
L002E:	plp
	beq     L002D
	lda     #$0A
	jmp     L006C
L002D:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	ldy     #$06
	cmp     (sp),y
	bne     L0065
	txa
	iny
	cmp     (sp),y
L0065:	jsr     boolne
	php
	inc     _cip
	bne     L0030
	inc     _cip+1
L0030:	plp
	beq     L008C
	lda     #$0B
	jmp     L006C
L008C:	lda     _lstki
	jsr     decax2
	jsr     aslax1
	clc
	adc     #<(_lstk)
	tay
	txa
	adc     #>(_lstk)
	tax
	tya
	jsr     ldaxi
	ldy     #$02
	jsr     staxysp
	ldy     #$07
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_var)
	tay
	txa
	adc     #>(_var)
	tax
	tya
	sta     sreg
	stx     sreg+1
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	sta     (sreg)
	ldy     #$01
	txa
	sta     (sreg),y
	ldx     #$00
	lda     _lstki
	jsr     decax3
	jsr     aslax1
	clc
	adc     #<(_lstk)
	tay
	txa
	adc     #>(_lstk)
	tax
	tya
	jsr     ldaxi
	ldy     #$04
	jsr     staxysp
	ldy     #$03
	jsr     ldaxysp
	cpx     #$80
	bcc     L006A
	ldy     #$07
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_var)
	tay
	txa
	adc     #>(_var)
	tax
	tya
	jsr     ldaxi
	ldy     #$04
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L0066
	eor     #$80
L0066:	bmi     L0096
L006A:	ldy     #$03
	jsr     ldaxysp
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0036
	eor     #$80
L0036:	asl     a
	ldx     #$00
	bcc     L0097
	ldy     #$07
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_var)
	tay
	txa
	adc     #>(_var)
	tax
	tya
	jsr     pushw
	ldy     #$07
	jsr     ldaxysp
	jsr     tosicmp
	beq     L0037
	bpl     L0096
L0037:	ldx     #$00
	bra     L0097
L0096:	lda     _lstki
	sec
	sbc     #$05
	sta     _lstki
	jmp     L0008
L0097:	lda     _lstki
	jsr     decax4
	jsr     aslax1
	clc
	adc     #<(_lstk)
	tay
	txa
	adc     #>(_lstk)
	tax
	tya
	jsr     ldaxi
	sta     _cip
	stx     _cip+1
	ldx     #$00
	lda     _lstki
	jsr     decax5
	jsr     aslax1
	clc
	adc     #<(_lstk)
	tay
	txa
	adc     #>(_lstk)
	tax
	tya
	jsr     ldaxi
	sta     _clp
	stx     _clp+1
	jmp     L0008
L003B:	inc     _cip
	bne     L003C
	inc     _cip+1
L003C:	jsr     _iexp
	jsr     stax0sp
	lda     _err
	beq     L003D
	lda     #$0F
	jmp     L006C
L003D:	ldy     #$01
	lda     (sp),y
	ora     (sp)
	beq     L0043
	jmp     L0008
L0040:	inc     _cip
	bne     L0043
	inc     _cip+1
L0043:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$26
	bne     L0040
	jmp     L0008
L0045:	lda     _clp+1
	sta     ptr1+1
	lda     _clp
	sta     ptr1
	lda     (ptr1)
	clc
	adc     _clp
	sta     _clp
	lda     #$00
	adc     _clp+1
	sta     _clp+1
L0047:	lda     _clp+1
	sta     ptr1+1
	lda     _clp
	sta     ptr1
	lda     (ptr1)
	bne     L0045
	lda     _clp
	ldx     _clp+1
	jmp     L0001
L0048:	inc     _cip
	bne     L0049
	inc     _cip+1
L0049:	jsr     _ivar
	bra     L0008
L004A:	inc     _cip
	bne     L004B
	inc     _cip+1
L004B:	jsr     _iarray
	bra     L0008
L004C:	inc     _cip
	bne     L004D
	inc     _cip+1
L004D:	jsr     _ilet
	bra     L0008
L004E:	inc     _cip
	bne     L004F
	inc     _cip+1
L004F:	jsr     _iprint
	bra     L0008
L0050:	inc     _cip
	bne     L0051
	inc     _cip+1
L0051:	jsr     _iinput
	bra     L0008
L0052:	inc     _cip
	bne     L0008
	inc     _cip+1
	bra     L0008
L0098:	lda     #$13
	bra     L006C
L0099:	lda     #$14
L006C:	sta     _err
L0008:	lda     _err
	beq     L0058
	ldx     #$00
	txa
	bra     L0001
L0058:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$26
	jne     L0002
	lda     _clp+1
	sta     ptr1+1
	lda     _clp
	sta     ptr1
	lda     (ptr1)
	clc
	adc     _clp
	ldx     _clp+1
	bcc     L0001
	inx
L0001:	ldy     #$0C
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ irun (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_irun: near

.segment	"CODE"

	jsr     decsp2
	stz     _gstki
	stz     _lstki
	lda     #>(_listbuf)
	sta     _clp+1
	lda     #<(_listbuf)
	sta     _clp
	bra     L0004
L0002:	lda     _clp
	ldx     _clp+1
	jsr     incax3
	sta     _cip
	stx     _cip+1
	jsr     _iexe
	jsr     stax0sp
	lda     _err
	bne     L0003
	jsr     ldax0sp
	sta     _clp
	stx     _clp+1
L0004:	lda     _clp+1
	sta     ptr1+1
	lda     _clp
	sta     ptr1
	lda     (ptr1)
	bne     L0002
L0003:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ ilist (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ilist: near

.segment	"CODE"

	jsr     decsp2
	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	ldx     #$00
	lda     (ptr1)
	cmp     #$23
	bne     L0011
	lda     _cip
	ldx     _cip+1
	jsr     _getlineno
	bra     L0003
L0011:	txa
L0003:	jsr     stax0sp
	lda     #>(_listbuf)
	sta     _clp+1
	lda     #<(_listbuf)
	sta     _clp
L0004:	lda     _clp+1
	sta     ptr1+1
	lda     _clp
	sta     ptr1
	lda     (ptr1)
	beq     L000D
	lda     _clp
	ldx     _clp+1
	jsr     _getlineno
	cmp     (sp)
	txa
	ldy     #$01
	sbc     (sp),y
	bvc     L000F
	eor     #$80
L000F:	bpl     L000D
	lda     _clp+1
	sta     ptr1+1
	lda     _clp
	sta     ptr1
	lda     (ptr1)
	clc
	adc     _clp
	sta     _clp
	lda     #$00
	adc     _clp+1
	sta     _clp+1
	bra     L0004
L000B:	lda     _clp
	ldx     _clp+1
	jsr     _getlineno
	jsr     pushax
	ldx     #$00
	txa
	jsr     _putnum
	lda     #$20
	jsr     _c_putch
	lda     _clp
	ldx     _clp+1
	jsr     incax3
	jsr     _putlist
	lda     _err
	bne     L000C
	jsr     _newline
	lda     _clp+1
	sta     ptr1+1
	lda     _clp
	sta     ptr1
	lda     (ptr1)
	clc
	adc     _clp
	sta     _clp
	lda     #$00
	adc     _clp+1
	sta     _clp+1
L000D:	lda     _clp+1
	sta     ptr1+1
	lda     _clp
	sta     ptr1
	lda     (ptr1)
	bne     L000B
L000C:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ inew (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inew: near

.segment	"CODE"

	jsr     decsp1
	lda     #$00
L000C:	sta     (sp)
	cmp     #$1A
	bcs     L0010
	ldx     #$00
	lda     (sp)
	asl     a
	bcc     L000E
	inx
	clc
L000E:	adc     #<(_var)
	sta     ptr1
	txa
	adc     #>(_var)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$01
	sta     (ptr1),y
	clc
	tya
	adc     (sp)
	bra     L000C
L0010:	lda     #$00
L000D:	sta     (sp)
	cmp     #$40
	bcs     L0011
	ldx     #$00
	lda     (sp)
	asl     a
	bcc     L000F
	inx
	clc
L000F:	adc     #<(_arr)
	sta     ptr1
	txa
	adc     #>(_arr)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$01
	sta     (ptr1),y
	clc
	tya
	adc     (sp)
	bra     L000D
L0011:	stz     _gstki
	stz     _lstki
	stz     _listbuf
	lda     #>(_listbuf)
	sta     _clp+1
	lda     #<(_listbuf)
	sta     _clp
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ icom (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_icom: near

.segment	"CODE"

	lda     #<(_ibuf)
	ldx     #>(_ibuf)
	sta     _cip
	stx     _cip+1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$1F
	beq     L0008
	cmp     #$20
	beq     L000E
	cmp     #$21
	bne     L0010
	inc     _cip
	bne     L0005
	inc     _cip+1
L0005:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$26
	bne     L0011
	jmp     _inew
L0011:	lda     #$14
	sta     _err
	rts
L0008:	inc     _cip
	bne     L0009
	inc     _cip+1
L0009:	lda     _cip+1
	sta     ptr1+1
	lda     _cip
	sta     ptr1
	lda     (ptr1)
	cmp     #$26
	beq     L0012
	lda     _cip
	ldx     _cip+1
	jsr     incax3
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$26
	bne     L0013
L0012:	jmp     _ilist
L0013:	lda     #$14
	sta     _err
	rts
L000E:	inc     _cip
	bne     L000F
	inc     _cip+1
L000F:	jmp     _irun
L0010:	jmp     _iexe

.endproc

; ---------------------------------------------------------------
; void __near__ error (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_error: near

.segment	"CODE"

	lda     _err
	beq     L0007
	lda     _cip
	cmp     #<(_listbuf)
	lda     _cip+1
	sbc     #>(_listbuf)
	bcc     L0003
	lda     _cip
	cmp     #<(_listbuf+31160)
	lda     _cip+1
	sbc     #>(_listbuf+31160)
	bcs     L0003
	lda     _clp+1
	sta     ptr1+1
	lda     _clp
	sta     ptr1
	lda     (ptr1)
	beq     L0003
	jsr     _newline
	lda     #<(S003D)
	ldx     #>(S003D)
	jsr     _c_puts
	lda     _clp
	ldx     _clp+1
	jsr     _getlineno
	jsr     pushax
	ldx     #$00
	txa
	jsr     _putnum
	lda     #$20
	jsr     _c_putch
	lda     _clp
	ldx     _clp+1
	jsr     incax3
	jsr     _putlist
	bra     L0007
L0003:	jsr     _newline
	lda     #<(S003E)
	ldx     #>(S003E)
	jsr     _c_puts
	lda     #<(_lbuf)
	ldx     #>(_lbuf)
	jsr     _c_puts
L0007:	jsr     _newline
	ldx     #$00
	lda     _err
	asl     a
	bcc     L0009
	inx
	clc
L0009:	adc     #<(_errmsg)
	tay
	txa
	adc     #>(_errmsg)
	tax
	tya
	jsr     ldaxi
	jsr     _c_puts
	jsr     _newline
	stz     _err
	rts

.endproc

